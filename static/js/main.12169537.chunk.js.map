{"version":3,"sources":["config/tmdb.ts","components/SearchBar/SearchBar.tsx","components/NavigationBar/NavigationBar.tsx","containers/MovieGrid/MovieGridContainer.tsx","containers/MovieGrid/index.ts","store/favorites/actions/addFavorite.ts","store/favorites/types/index.ts","store/favorites/actions/removeFavorite.ts","store/watchLater/actions/removeWatchLater.ts","store/watchLater/types/index.ts","store/watchLater/actions/addWatchLater.ts","containers/MovieSearchResults/MovieSearchResultsContainer.tsx","containers/MovieSearchResults/index.ts","containers/FavoriteMovies/FavoriteMoviesContainer.tsx","containers/FavoriteMovies/index.ts","containers/WatchLaterMovies/WatchLaterMoviesContainer.tsx","containers/WatchLaterMovies/index.ts","services/tmdb/tmdb.ts","containers/MovieTrailerModal/MovieTrailerModal.tsx","containers/MovieTrailerModal/index.ts","store/movieTrailer/actions/getMovieTrailer.ts","store/movieTrailer/types/index.ts","store/movieTrailer/actions/resetMovieTrailer.ts","components/MovieCard/MovieCard.tsx","util/tmdb.ts","components/MovieGrid/MovieGrid.tsx","components/Pagination/Pagination.tsx","components/Modal/Modal.tsx","components/MovieTrailer/MovieTrailer.tsx","views/layouts/MainLayout/MainLayout.tsx","views/pages/Search/SearchPage.tsx","views/pages/Search/index.ts","store/movieSearch/actions/searchMovies.ts","store/movieSearch/types/index.ts","store/movieSearch/actions/resetMovieSearch.ts","store/movieSearch/actions/setSearchText.ts","views/pages/Favorites/FavoritesPage.tsx","views/pages/WatchLater/WatchLaterPage.tsx","App.tsx","config/app.ts","serviceWorker.ts","store/movieSearch/reducers/movieSearch.ts","store/favorites/reducers/favoritesReducer.ts","store/watchLater/reducers/watchLaterReducer.ts","store/movieTrailer/reducers/movieTrailerReducer.ts","store/rootReducer.ts","store/movieSearch/reducers/searchTextReducer.ts","store/index.ts","locale/index.ts","locale/en/index.ts","locale/en/searchBar.ts","locale/en/navBar.ts","locale/en/movie.ts","locale/en/pagination.ts","locale/en/movieTrailer.ts","index.tsx"],"names":["process","REACT_APP_TMDB_API_KEY","tmdbAPIKey","REACT_APP_TMDB_API_URL","tmdbAPIURL","REACT_APP_TMDB_IMAGE_BASE_URL","tmdbImageBaseUrl","SearchBar","onChange","value","intl","useIntl","Form","Control","placeholder","formatMessage","id","type","newValue","target","NavigationBar","useState","mobileMenuOpen","setMobileMenuOpen","toggleMobileMenu","useCallback","className","to","onClick","cn","exact","activeClassName","color","size","MovieGridContainer","movies","favorites","watchLater","addFavorite","removeFavorite","addWatchLater","removeWatchLater","onAddToFavorites","onRemoveFromFavorites","onAddToWatchLater","onRemoveFromWatchLater","mapDispatchToProps","movie","payload","connect","MovieSearchResultsContainer","movieSearchState","isFetching","isFetched","data","error","results","movieSearch","FavoriteMoviesContainer","favoriteMovies","Object","values","WatchLaterMoviesContainer","getJSON","endpoint","apiURL","a","fetch","response","json","searchMovies","query","page","apiKey","stringify","api_key","getMovieTrailers","movieId","MovieTrailerModalContainer","resetMovieTrailer","onRequestClose","trailerState","trailer","getMovieTrailer","useEffect","noVideos","dispatch","youtube","message","MovieTrailerModal","MovieCard","imageRelativeURL","imageWidth","favorite","trailerModalOpen","setModalTrailerOpen","posterPath","poster_path","originalTitle","original_title","title","fill","src","alt","MovieGrid","length","map","isFavorite","undefined","isWatchLater","key","Pagination","totalPages","onNextClick","onPreviousClick","isLastPage","isFirstPage","disabled","Modal","children","event","stopPropagation","MovieTrailer","source","opts","width","videoId","MainLayout","SearchPage","searchText","setSearchText","searchMoviesDebounced","debounce","handleSearchTextChange","text","handlePageChange","newPage","MovieSearchResults","total_pages","FavoritesPage","FavoriteMovies","WatchLaterPage","WatchLaterMovies","App","basename","path","component","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","state","action","persistConfig","whitelist","storage","middleware","thunk","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","en","ReactDOM","render","StrictMode","loading","locale","messages","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"kcAIIA,gV,IAHFC,uBAAwBC,O,MAAa,G,MACrCC,uBAAwBC,O,MAAa,G,MACrCC,8BAA+BC,O,MAAmB,G,kBCcrCC,EAZG,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAmC,IAAzBC,aAAyB,MAAjB,GAAiB,EAChDC,EAAOC,cACb,OACE,kBAACC,EAAA,EAAKC,QAAN,CACEJ,MAAOA,EACPK,YAAaJ,EAAKK,cAAc,CAAEC,GAAI,0BACtCC,KAAK,OACLT,SAAU,gBAAoBU,EAApB,EAAGC,OAAUV,MAAb,OAAqCD,EAASU,O,iDCoD/CE,G,MAxDO,WAAO,IAAD,EACkBC,oBAAS,GAD3B,mBACnBC,EADmB,KACHC,EADG,KAEpBC,EAAmBC,uBAAY,WACnCF,GAAmBD,KAClB,CAACA,EAAgBC,IAEpB,OACE,yBAAKG,UAAU,kBACb,kBAAC,IAAD,CAAMA,UAAU,wBAAwBC,GAAG,KACzC,kBAAC,IAAD,CAAkBX,GAAG,kBAEvB,yBACEY,QAASJ,EACTE,UAAWG,IAAG,uBAAwB,CACpC,oCAAqCP,KAGvC,kBAAC,IAAD,CACEQ,OAAK,EACLC,gBAAgB,qCAChBL,UAAU,6BACVC,GAAG,KAEH,kBAAC,IAAD,CAAkBX,GAAG,mBAEvB,kBAAC,IAAD,CACEc,OAAK,EACLC,gBAAgB,qCAChBL,UAAU,6BACVC,GAAG,aAEH,kBAAC,IAAD,CAAkBX,GAAG,sBAEvB,kBAAC,IAAD,CACEc,OAAK,EACLC,gBAAgB,qCAChBL,UAAU,6BACVC,GAAG,eAEH,kBAAC,IAAD,CAAkBX,GAAG,uBAEvB,4BAAQC,KAAK,SAASS,UAAU,kCAC9B,kBAAC,IAAD,CAAgBM,MAAM,YAG1B,4BACEf,KAAK,SACLW,QAASJ,EACTE,UAAU,4BAEV,kBAAC,IAAD,CAAiBO,KAAM,GAAID,MAAM,c,QClC1BE,EApBY,SAAC,GAAD,IACzBC,EADyB,EACzBA,OACAC,EAFyB,EAEzBA,UACAC,EAHyB,EAGzBA,WACAC,EAJyB,EAIzBA,YACAC,EALyB,EAKzBA,eACAC,EANyB,EAMzBA,cACAC,EAPyB,EAOzBA,iBAPyB,OASzB,kBAAC,EAAD,CACEN,OAAQA,EACRC,UAAWA,EACXC,WAAYA,EACZK,iBAAkBJ,EAClBK,sBAAuBJ,EACvBK,kBAAmBJ,EACnBK,uBAAwBJ,KCdtBK,EAAqB,CACzBR,YCHa,SAACS,GAAD,MAAwC,CACrD9B,KCL0B,eDM1B+B,QAASD,IDETR,eGJa,SAACQ,GAAD,MAA2C,CACxD9B,KDJ6B,kBCK7B+B,QAASD,IHGTN,iBILa,SAACM,GAAD,MAA6C,CAC1D9B,KCJgC,qBDKhC+B,QAASD,IJITP,cMNa,SAACO,GAAD,MAA0C,CACvD9B,KDL6B,kBCM7B+B,QAASD,KNSIE,eAFS,SAAC,GAAD,MAA4C,CAAEb,UAA9C,EAAGA,UAAsDC,WAAzD,EAAcA,cAEES,EAAzBG,CAA6Cf,GOE7CgB,EAbqB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,iBAC7BC,EAAuCD,EAAvCC,WAAYC,EAA2BF,EAA3BE,UAAWC,EAAgBH,EAAhBG,KAAMC,EAAUJ,EAAVI,MACrC,GAAIH,IAAeC,IAAcC,EAC/B,OAAO,KAET,GAAIC,EACF,OAAO,yBAAK7B,UAAU,uBAAuB6B,GANqB,IASnDpB,EAAWmB,EAApBE,QACR,OAAO,kBAAC,EAAD,CAAoBrB,OAAQA,KCRtBc,eAFS,SAAC,GAAD,MAAkC,CAAEE,iBAApC,EAAGM,eAEZR,CAAyBC,GCIzBQ,EALiB,SAAC,GAA2B,IAAzBtB,EAAwB,EAAxBA,UAC3BuB,EAAiBC,OAAOC,OAAOzB,GACrC,OAAO,kBAAC,EAAD,CAAoBD,OAAQwB,KCDtBV,eAFS,SAAC,GAAD,MAAgC,CAAEb,UAAlC,EAAGA,aAEZa,CAAyBS,GCIzBA,EALiB,SAAC,GAA4B,IAA1BrB,EAAyB,EAAzBA,WAC3BsB,EAAiBC,OAAOC,OAAOxB,GACrC,OAAO,kBAAC,EAAD,CAAoBF,OAAQwB,KCDtBV,eAFS,SAAC,GAAD,MAAiC,CAAEZ,WAAnC,EAAGA,cAEZY,CAAyBa,G,iCCDlCC,EAAO,uCAAG,WAAUC,EAAkBC,GAA5B,iBAAAC,EAAA,sEACSC,MAAM,GAAD,OAAIF,EAAJ,YAAcD,IAD5B,cACRI,EADQ,gBAEQA,EAASC,OAFjB,cAERA,EAFQ,yBAGPA,GAHO,2CAAH,wDAMAC,EAAY,uCAAG,WAAOC,GAAP,mCAAAL,EAAA,6DAAsBM,EAAtB,+BAAqC,EAAGP,EAAxC,+BAAyD7D,EAAYqE,EAArE,+BAAsFvE,EAC1G8D,EADoB,uBACOU,oBAAU,CAAEH,QAAOI,QAASF,EAAQD,UAD3C,SAEeT,EAA8BC,EAAUC,GAFvD,cAEpBI,EAFoB,yBAGnBA,GAHmB,2CAAH,sDAMZO,EAAgB,uCAAG,WAAOC,GAAP,iCAAAX,EAAA,6DAAwBD,EAAxB,+BAAyC7D,EAAYqE,EAArD,+BAAsEvE,EAC9F8D,EADwB,gBACJa,EADI,qBACgBH,oBAAU,CAAEC,QAASF,KADrC,SAEYV,EAA+BC,EAAUC,GAFrD,cAExBI,EAFwB,yBAGvBA,GAHuB,2CAAH,sDCmBdS,G,MA9BoB,SAAC,GAMrB,IALbC,EAKY,EALZA,kBACAC,EAIY,EAJZA,eACaH,EAGD,EAHZ9B,MAAS/B,GAGG,IAFZiE,aAAsBC,EAEV,EAFI5B,KAAeC,EAEnB,EAFmBA,MAAOF,EAE1B,EAF0BA,UACtC8B,EACY,EADZA,gBAEAC,qBAAU,WACRD,EAAgBN,KACf,CAACA,EAASM,IAEbC,qBAAU,WACR,OAAO,WACLL,OAED,CAACA,IAEJ,IAAMM,EAAWhC,IAAc6B,EAC/B,OACE,kBAAC,EAAD,CAAOF,eAAgBA,IACnBK,GAAY9B,IACZ,yBAAK7B,UAAU,kCACb,kBAAC,IAAD,CAAkBV,GAAG,2BAGxBkE,GAAW,kBAAC,GAAD,CAAcA,QAASA,OCzBnCpC,EAAqB,CACzBqC,gBCUa,SAACN,GAAD,8CAAqB,WAAOS,GAAP,uBAAApB,EAAA,6DAClCoB,EAbiE,CACjErE,KCNuC,8BDiBL,kBAIT2D,EAAiBC,GAJR,OAI1BT,EAJ0B,OAKxBmB,EAAYnB,EAAZmB,QACFL,EAAUK,EAAQ,GACxBD,EAZsF,CACxFrE,KCXyC,8BDYzC+B,QAUkCkC,IAPA,yDASxBM,EATwB,EASxBA,QACRF,EAnBgF,CAClFrE,KCRyC,6BDSzC+B,QAiBkCwC,IAVA,0DAArB,uDDTbT,kBGLa,iBAAiC,CAC9C9D,KDDuC,+BFQ1BgC,eANS,SAAC,GAAD,MAA8B,CAAEgC,aAAhC,EAAGC,WAMapC,EAAzBG,CAA6CwC,GI+E7CC,G,MA3EG,SAAC,GAQJ,ICpBbC,EACAC,EDYA7C,EAOY,EAPZA,MAOY,IANZ8C,gBAMY,aALZxD,kBAKY,SAJZK,EAIY,EAJZA,iBACAE,EAGY,EAHZA,kBACAD,EAEY,EAFZA,sBACAE,EACY,EADZA,uBACY,EACoCxB,oBAAS,GAD7C,mBACLyE,EADK,KACaC,EADb,KAESC,EAA8CjD,EAA3DkD,YAAyCC,EAAkBnD,EAAlCoD,eAC3BzF,EAAOC,cAEb,OACE,oCACE,yBAAKe,UAAU,cACb,4BACET,KAAK,SACLmF,MAAO1F,EAAKK,cAAc,CACxBC,GAAG,SAAD,OAAW6E,EAAW,sBAAwB,oBAElDjE,QAASiE,EAAWlD,EAAwBD,EAC5ChB,UAAU,8CAETmE,EACC,kBAAC,IAAD,CAAYQ,KA3BI,WA6BhB,kBAAC,IAAD,CAAeA,KA9BL,eAkCd,4BACEpF,KAAK,SACLmF,MAAO1F,EAAKK,cAAc,CACxBC,GAAG,SAAD,OACAqB,EAAa,uBAAyB,qBAG1CT,QAASS,EAAaQ,EAAyBD,EAC/ClB,UAAU,sDAETW,EACC,kBAAC,IAAD,CAAcgE,KA9CQ,WAgDtB,kBAAC,IAAD,CAAcA,KAjDE,UAoDpB,yBACEzE,QAAS,kBAAMmE,GAAoB,IACnCrE,UAAU,uBAETsE,EACC,yBACEtE,UAAU,qBACV4E,KClEZX,EDkEiCK,ECjEjCJ,EDKuB,ICHjB,GAAN,OAAUtF,EAAV,aAA+BsF,GAA/B,OAA4CD,IDgEhCY,IAAKL,IAGP,yBAAKxE,UAAU,8BACb,kBAAC,IAAD,CAAkBV,GAAG,0BAI3B,yBAAKU,UAAU,qBAAqBwE,IAErCJ,GACC,kBAAC,EAAD,CACE/C,MAAOA,EACPiC,eAAgB,kBAAMe,GAAoB,SEvCrCS,G,MAtCG,SAAC,GAQJ,IAPbrE,EAOY,EAPZA,OACAC,EAMY,EANZA,UACAC,EAKY,EALZA,WACAK,EAIY,EAJZA,iBACAC,EAGY,EAHZA,sBACAC,EAEY,EAFZA,kBACAC,EACY,EADZA,uBAEA,OAAsB,IAAlBV,EAAOsE,OAEP,yBAAK/E,UAAU,0BACb,kBAAC,IAAD,CAAkBV,GAAG,qBAKzB,yBAAKU,UAAU,cACZS,EAAOuE,KAAI,SAAC3D,GACX,IAAM4D,OAAqCC,IAAxBxE,EAAUW,EAAM/B,IAC7B6F,OAAwCD,IAAzBvE,EAAWU,EAAM/B,IACtC,OACE,kBAAC,EAAD,CACE8F,IAAK/D,EAAM/B,GACX+B,MAAOA,EACP8C,SAAUc,EACVtE,WAAYwE,EACZnE,iBAAkB,kBAAMA,EAAiBK,IACzCH,kBAAmB,kBAAMA,EAAkBG,IAC3CJ,sBAAuB,kBAAMA,EAAsBI,IACnDF,uBAAwB,kBAAMA,EAAuBE,YCKlDgE,G,MAnCI,SAAC,GAKL,IAJbvC,EAIY,EAJZA,KACAwC,EAGY,EAHZA,WACAC,EAEY,EAFZA,YACAC,EACY,EADZA,gBAEMC,EAAa3C,IAASwC,EACtBI,EAAuB,IAAT5C,EAEpB,OACE,yBAAK9C,UAAU,cACb,yBAAKA,UAAU,8BACb,4BACET,KAAK,SACLW,QAASsF,EACTG,SAAUD,EACV1F,UAAWG,IAAG,oBAEd,kBAAC,IAAD,CAAkBb,GAAG,0BAGzB,yBAAKU,UAAU,8BACb,4BACET,KAAK,SACLW,QAASqF,EACTI,SAAUF,EACVzF,UAAWG,IAAG,oBAEd,kBAAC,IAAD,CAAkBb,GAAG,yBCnBhBsG,G,MAXD,SAAC,GAAD,IAAGtC,EAAH,EAAGA,eAAgBuC,EAAnB,EAAmBA,SAAnB,OACZ,yBAAK3F,QAASoD,EAAgBtD,UAAU,qBACtC,yBACEE,QAAS,SAAC4F,GAAD,OAAWA,EAAMC,mBAC1B/F,UAAU,kBAET6F,M,QCIQG,I,MATM,SAAC,GAAyB,IACrCC,EADoC,EAAtBzC,QACdyC,OACR,OACE,yBAAKjG,UAAU,iBACb,kBAAC,IAAD,CAASkG,KAAM,CAAEC,MAAO,QAAUC,QAASH,OCOlCI,I,MAZI,SAAC,GAAD,IACjBR,EADiB,EACjBA,SADiB,OAMjB,yBAAK7F,UAAU,eACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,wBAAwB6F,M,oBC0C5BS,I,MA/CI,SAAC,GAKL,IAJbC,EAIY,EAJZA,WACAC,EAGY,EAHZA,cACA/E,EAEY,EAFZA,iBACAmB,EACY,EADZA,aAEM6D,EAAwB1G,sBAAY2G,KAAS9D,EAAc,KAAM,CACrEA,IAGI+D,EAAyB5G,uBAC7B,SAAC6G,GACCJ,EAAcI,GACdH,EAAsBG,EAAM,KAE9B,CAACJ,EAAeC,IAGZI,EAAmB9G,uBACvB,SAAC+G,GACClE,EAAa2D,EAAYO,KAE3B,CAACP,EAAY3D,IAGDd,EAAYL,EAAlBG,KAER,OACE,yBAAK5B,UAAU,eACb,yBAAKA,UAAU,qCACb,kBAAC,EAAD,CAAWjB,MAAOwH,EAAYzH,SAAU6H,KAE1C,yBAAK3G,UAAU,yCACb,kBAAC+G,EAAD,OAEDjF,GAAWA,EAAQkF,YAAc,GAChC,kBAAC,EAAD,CACE1B,WAAYxD,EAAQkF,YACpBlE,KAAMhB,EAAQgB,KACdyC,YAAa,kBAAMsB,EAAiB/E,EAAQgB,KAAO,IACnD0C,gBAAiB,kBAAMqB,EAAiB/E,EAAQgB,KAAO,SCzC3D1B,GAAqB,CACzBwB,aCIa,SAACC,EAAeC,GAAhB,8CAAiC,WAAOc,GAAP,mBAAApB,EAAA,yDAC9CoB,EALuD,CAAErE,KCPzB,uBDc3BsD,EAHyC,yCAIrCe,EEZoC,CAAErE,KDAf,wBDQc,gCAQrBqD,EAAaC,EAAOC,GARC,OAQtCJ,EARsC,OAS5CkB,EAXmF,CAAErE,KCPrD,uBDOiF+B,QAWrFoB,IATgB,yDAWpCoB,EAXoC,EAWpCA,QACRF,EAfyE,CAAErE,KCP3C,sBDOuE+B,QAe3EwC,IAZgB,0DAAjC,uDDHb0C,cILa,SAACI,GAAD,MAAyC,CACtDrH,KFC6B,kBEA7B+B,QAASsF,KJKIrF,gBALS,SAAC,GAAD,MAA8C,CAAEE,iBAAhD,EAAGM,YAA4EwE,WAA/E,EAAgBA,cAKAnF,GAAzBG,CAA6C+E,IKL7CW,GAFO,kBAAM,kBAACC,EAAD,OCEbC,GAFQ,kBAAM,kBAACC,EAAD,OCedC,OAZf,WACE,OACE,kBAAC,IAAD,CAAQC,SCRiDhJ,cDSvD,kBAAC,GAAD,KACE,kBAAC,IAAD,CAAO8B,OAAK,EAACmH,KAAK,IAAIC,UAAWlB,KACjC,kBAAC,IAAD,CAAOlG,OAAK,EAACmH,KAAK,aAAaC,UAAWP,KAC1C,kBAAC,IAAD,CAAO7G,OAAK,EAACmH,KAAK,eAAeC,UAAWL,QEAhCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oECdOC,GAAkC,CAC7CnG,WAAW,EACXD,YAAY,G,SCHDoG,GAA2B,GCA3BA,GAA4B,GCC5BA,GAAwC,CACnDnG,WAAW,EACXD,YAAY,GCWCqG,GARmBC,2BAAgB,CAChDjG,YJDa,WAA4F,IAA3FkG,EAA0F,uDAA/DH,GAAcI,EAAiD,uCACxG,OAAQA,EAAO3I,MACb,IRX8B,qBQY5B,OAAO,6BAAKuI,IAAZ,IAA0BpG,YAAY,IACxC,IRZgC,sBQa9B,OAAO,6BAAKoG,IAAZ,IAA0BnG,WAAW,EAAOD,YAAY,EAAOG,MAAOqG,EAAO5G,UAC/E,IRbgC,uBQc9B,OAAO,6BAAKwG,IAAZ,IAA0BnG,WAAW,EAAMD,YAAY,EAAOE,KAAMsG,EAAO5G,UAC7E,IRd8B,qBQe5B,OAAOwG,GACT,QACE,OAAOG,IITXvH,UHNa,WAA+D,IAA9DuH,EAA6D,uDAAzCH,GAAcI,EAA2B,uCAC3E,OAAQA,EAAO3I,MACb,IpCPwB,eoCOJ,IACVD,EAAO4I,EAAO5G,QAAdhC,GACR,OAAO,6BAAK2I,GAAZ,mBAAoB3I,EAAK4I,EAAO5G,UAElC,IpCV2B,kBoCUJ,IACbhC,EAAO4I,EAAO5G,QAAdhC,GAER,cADO2I,EAAM3I,GACN,gBAAK2I,GAEd,QACE,OAAOA,IGLXtH,WFPa,WAAmE,IAAlEsH,EAAiE,uDAA5CH,GAAcI,EAA8B,uCAC/E,OAAQA,EAAO3I,MACb,IlCP2B,kBkCOJ,IACbD,EAAO4I,EAAO5G,QAAdhC,GACR,OAAO,6BAAK2I,GAAZ,mBAAoB3I,EAAK4I,EAAO5G,UAElC,IlCV8B,qBkCUJ,IAChBhC,EAAO4I,EAAO5G,QAAdhC,GAER,cADO2I,EAAM3I,GACN,gBAAK2I,GAEd,QACE,OAAOA,IEJXzE,QDJa,WAA0G,IAAzGyE,EAAwG,uDAAvEH,GAAcI,EAAyD,uCACtH,OAAQA,EAAO3I,MACb,IvBXqC,4BuBYnC,OAAO,6BAAKuI,IAAZ,IAA0BpG,YAAY,IACxC,IvBZuC,6BuBarC,OAAO,6BAAKoG,IAAZ,IAA0BnG,WAAW,EAAOD,YAAY,EAAOG,MAAOqG,EAAO5G,UAC/E,IvBbuC,8BuBcrC,OAAO,6BAAKwG,IAAZ,IAA0BnG,WAAW,EAAMD,YAAY,EAAOE,KAAMsG,EAAO5G,UAC7E,IvBdqC,4BuBenC,OAAOwG,GACT,QACE,OAAOG,ICNX1B,WCTa,WAAyE,IAAxE0B,EAAuE,uDAFlE,GAEyBC,EAAyC,uCACrF,OAAQA,EAAO3I,MACb,IbF2B,kBaGzB,OAAO2I,EAAO5G,QAChB,QACE,OAAO2G,MCFPE,GAAgB,CACpB/C,IAAK,YACLgD,UAAW,CAAC,YAAa,cACzBC,cAGIC,GAA2B,CAACC,MAErBC,GAAmBC,aAAeN,GAAeJ,IACjDW,GAAQC,uBACnBH,GACAI,+BAAoBC,mBAAe,WAAf,EAAmBP,MAE5BQ,GAAYC,aAAaL,ICnBvB,IACbM,GCGa,oECNA,CACb,wBAAyB,6BCDZ,CACb,gBAAiB,SACjB,oBAAqB,cACrB,mBAAoB,YACpB,eAAgB,cCJH,CACb,sBAAuB,uBACvB,kBAAmB,iBACnB,uBAAwB,mBACxB,wBAAyB,qBACzB,4BAA6B,wBAC7B,6BAA8B,4BCNjB,CACb,kBAAmB,OACnB,sBAAuB,aCFV,CACb,wBAAyB,uB,MCW3BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUT,MAAOA,IACf,kBAAC,IAAD,CAAaU,QAAS,KAAMN,UAAWA,IACrC,kBAAC,IAAD,CAAcO,OAAO,KAAKC,SAAUD,GAAOL,IACzC,kBAAC,GAAD,UAKRO,SAASC,eAAe,SfqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlI,GACLmI,QAAQnI,MAAMA,EAAMiC,c","file":"static/js/main.12169537.chunk.js","sourcesContent":["const {\n  REACT_APP_TMDB_API_KEY: tmdbAPIKey = \"\",\n  REACT_APP_TMDB_API_URL: tmdbAPIURL = \"\",\n  REACT_APP_TMDB_IMAGE_BASE_URL: tmdbImageBaseUrl = \"\",\n} = process.env;\n\nexport { tmdbAPIKey, tmdbAPIURL, tmdbImageBaseUrl };\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\nimport Form from \"react-bootstrap/Form\";\nimport { IProps } from \"./interfaces\";\n\nconst SearchBar = ({ onChange, value = \"\" }: IProps) => {\n  const intl = useIntl();\n  return (\n    <Form.Control\n      value={value}\n      placeholder={intl.formatMessage({ id: \"searchBar.placeholder\" })}\n      type=\"text\"\n      onChange={({ target: { value: newValue } }) => onChange(newValue)}\n    />\n  );\n};\n\nexport default SearchBar;\n","import React, { useState, useCallback } from \"react\";\nimport cn from \"classnames\";\nimport { FormattedMessage } from \"react-intl\";\nimport { GiHamburgerMenu } from \"react-icons/gi\";\nimport { AiOutlineClose } from \"react-icons/ai\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport \"./styles.css\";\n\nconst NavigationBar = () => {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const toggleMobileMenu = useCallback(() => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  }, [mobileMenuOpen, setMobileMenuOpen]);\n\n  return (\n    <div className=\"navigation-bar\">\n      <Link className=\"navigation-bar__title\" to=\"/\">\n        <FormattedMessage id=\"navBar.title\" />\n      </Link>\n      <div\n        onClick={toggleMobileMenu}\n        className={cn(\"navigation-bar__menu\", {\n          \"navigation-bar__menu--mobile-open\": mobileMenuOpen,\n        })}\n      >\n        <NavLink\n          exact\n          activeClassName=\"navigation-bar__menu__item--active\"\n          className=\"navigation-bar__menu__item\"\n          to=\"/\"\n        >\n          <FormattedMessage id=\"navBar.search\" />\n        </NavLink>\n        <NavLink\n          exact\n          activeClassName=\"navigation-bar__menu__item--active\"\n          className=\"navigation-bar__menu__item\"\n          to=\"favorites\"\n        >\n          <FormattedMessage id=\"navBar.favorites\" />\n        </NavLink>\n        <NavLink\n          exact\n          activeClassName=\"navigation-bar__menu__item--active\"\n          className=\"navigation-bar__menu__item\"\n          to=\"watch-later\"\n        >\n          <FormattedMessage id=\"navBar.watchLater\" />\n        </NavLink>\n        <button type=\"button\" className=\"navigation-bar__menu-close-btn\">\n          <AiOutlineClose color=\"white\" />\n        </button>\n      </div>\n      <button\n        type=\"button\"\n        onClick={toggleMobileMenu}\n        className=\"navigation-bar__menu-btn\"\n      >\n        <GiHamburgerMenu size={20} color=\"white\" />\n      </button>\n    </div>\n  );\n};\n\nexport default NavigationBar;\n","import React from \"react\";\nimport { IProps } from \"./interfaces\";\nimport { MovieGrid } from \"../../components\";\n\nconst MovieGridContainer = ({\n  movies,\n  favorites,\n  watchLater,\n  addFavorite,\n  removeFavorite,\n  addWatchLater,\n  removeWatchLater,\n}: IProps) => (\n  <MovieGrid\n    movies={movies}\n    favorites={favorites}\n    watchLater={watchLater}\n    onAddToFavorites={addFavorite}\n    onRemoveFromFavorites={removeFavorite}\n    onAddToWatchLater={addWatchLater}\n    onRemoveFromWatchLater={removeWatchLater}\n  />\n);\n\nexport default MovieGridContainer;\n","import { connect } from 'react-redux';\nimport { addFavorite, removeFavorite } from '../../store/favorites/actions';\nimport { addWatchLater, removeWatchLater } from '../../store/watchLater/actions';\nimport MovieGridContainer from './MovieGridContainer';\nimport { IStateTree } from '../../store/interfaces';\n\nconst mapDispatchToProps = {\n  addFavorite,\n  removeFavorite,\n  removeWatchLater,\n  addWatchLater\n};\n\nconst mapStateToProps = ({ favorites, watchLater }: IStateTree) => ({ favorites, watchLater });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieGridContainer);","import { IMovie } from \"../../movieSearch/models\";\nimport { ADD_FAVORITE } from \"../types\";\nimport { IAddFavoriteAction } from \"../models\";\n\nexport default (movie: IMovie): IAddFavoriteAction => ({\n  type: ADD_FAVORITE,\n  payload: movie\n})","export const ADD_FAVORITE = 'FAVORITE/ADD';\nexport const REMOVE_FAVORITE = 'FAVORITE/REMOVE';","import { IMovie } from \"../../movieSearch/models\";\nimport { REMOVE_FAVORITE } from \"../types\";\nimport { IRemoveFavoriteAction } from \"../models\";\n\nexport default (movie: IMovie): IRemoveFavoriteAction => ({\n  type: REMOVE_FAVORITE,\n  payload: movie\n})","import { IMovie } from \"../../movieSearch/models\";\nimport { REMOVE_WATCH_LATER } from \"../types\";\nimport { IWatchLaterRemoveAction } from \"../models\";\n\nexport default (movie: IMovie): IWatchLaterRemoveAction => ({\n  type: REMOVE_WATCH_LATER,\n  payload: movie\n})","export const ADD_WATCH_LATER = 'WATCH_LATER/ADD';\nexport const REMOVE_WATCH_LATER = 'WATCH_LATER/REMOVE';","import { IMovie } from \"../../movieSearch/models\";\nimport { ADD_WATCH_LATER } from \"../types\";\nimport { IWatchLaterAddAction } from \"../models\";\n\nexport default (movie: IMovie): IWatchLaterAddAction => ({\n  type: ADD_WATCH_LATER,\n  payload: movie\n})","import React from \"react\";\nimport MovieGridContainer from \"../MovieGrid\";\nimport { IProps } from \"./interfaces\";\n\nconst MovieSearchResultsContainer = ({ movieSearchState }: IProps) => {\n  const { isFetching, isFetched, data, error } = movieSearchState;\n  if (isFetching || !isFetched || !data) {\n    return null;\n  }\n  if (error) {\n    return <div className=\"movie-search__error\">{error}</div>;\n  }\n\n  const { results: movies } = data;\n  return <MovieGridContainer movies={movies} />;\n};\n\nexport default MovieSearchResultsContainer;\n","import { connect } from 'react-redux';\nimport MovieSearchResultsContainer from './MovieSearchResultsContainer';\nimport { IStateTree } from '../../store/interfaces';\n\nconst mapStateToProps = ({ movieSearch }: IStateTree) => ({ movieSearchState: movieSearch })\n\nexport default connect(mapStateToProps)(MovieSearchResultsContainer);","import React from \"react\";\nimport { IProps } from \"./interfaces\";\nimport MovieGridContainer from \"../MovieGrid\";\nimport { IMovie } from \"../../store/movieSearch/models\";\n\nconst FavoriteMoviesContainer = ({ favorites }: IProps) => {\n  const favoriteMovies = Object.values(favorites) as IMovie[];\n  return <MovieGridContainer movies={favoriteMovies} />;\n};\n\nexport default FavoriteMoviesContainer;\n","import { connect } from 'react-redux';\nimport FavoriteMoviesContainer from './FavoriteMoviesContainer';\nimport { IStateTree } from '../../store/interfaces';\n\nconst mapStateToProps = ({ favorites }: IStateTree) => ({ favorites })\n\nexport default connect(mapStateToProps)(FavoriteMoviesContainer);","import React from \"react\";\nimport { IProps } from \"./interfaces\";\nimport MovieGridContainer from \"../MovieGrid\";\nimport { IMovie } from \"../../store/movieSearch/models\";\n\nconst FavoriteMoviesContainer = ({ watchLater }: IProps) => {\n  const favoriteMovies = Object.values(watchLater) as IMovie[];\n  return <MovieGridContainer movies={favoriteMovies} />;\n};\n\nexport default FavoriteMoviesContainer;\n","import { connect } from 'react-redux';\nimport WatchLaterMoviesContainer from './WatchLaterMoviesContainer';\nimport { IStateTree } from '../../store/interfaces';\n\nconst mapStateToProps = ({ watchLater }: IStateTree) => ({ watchLater })\n\nexport default connect(mapStateToProps)(WatchLaterMoviesContainer);","import { tmdbAPIKey, tmdbAPIURL } from '../../config';\nimport { stringify } from 'querystring';\nimport { IMovieSearchResponse } from '../../store/movieSearch/models';\nimport { IMovieTrailerResponse } from '../../store/movieTrailer/models';\n\nconst getJSON = async <T>(endpoint: string, apiURL: string) => {\n  const response = await fetch(`${apiURL}/${endpoint}`)\n  const json: T = await response.json();\n  return json;\n}\n\nexport const searchMovies = async (query: string, page: number = 1, apiURL: string = tmdbAPIURL, apiKey: string = tmdbAPIKey): Promise<IMovieSearchResponse> => {\n  const endpoint = `search/movie?${stringify({ query, api_key: apiKey, page })}`;\n  const json: IMovieSearchResponse = await getJSON<IMovieSearchResponse>(endpoint, apiURL);\n  return json;\n}\n\nexport const getMovieTrailers = async (movieId: number, apiURL: string = tmdbAPIURL, apiKey: string = tmdbAPIKey): Promise<IMovieTrailerResponse> => {\n  const endpoint = `movie/${movieId}/trailers?${stringify({ api_key: apiKey })}`;\n  const json: IMovieTrailerResponse = await getJSON<IMovieTrailerResponse>(endpoint, apiURL);\n  return json;\n}","import React, { useEffect } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Modal, MovieTrailer } from \"../../components\";\nimport { IProps } from \"./interfaces\";\nimport \"./styles.css\";\n\nconst MovieTrailerModalContainer = ({\n  resetMovieTrailer,\n  onRequestClose,\n  movie: { id: movieId },\n  trailerState: { data: trailer, error, isFetched },\n  getMovieTrailer,\n}: IProps) => {\n  useEffect(() => {\n    getMovieTrailer(movieId);\n  }, [movieId, getMovieTrailer]);\n\n  useEffect(() => {\n    return () => {\n      resetMovieTrailer();\n    };\n  }, [resetMovieTrailer]);\n\n  const noVideos = isFetched && !trailer;\n  return (\n    <Modal onRequestClose={onRequestClose}>\n      {(noVideos || error) && (\n        <div className=\"movie-trailer-modal__not-found\">\n          <FormattedMessage id=\"movieTrailer.notFound\" />\n        </div>\n      )}\n      {trailer && <MovieTrailer trailer={trailer} />}\n    </Modal>\n  );\n};\n\nexport default MovieTrailerModalContainer;\n","import { connect } from 'react-redux';\nimport { getMovieTrailer, resetMovieTrailer } from '../../store/movieTrailer/actions';\nimport { IStateTree } from '../../store/interfaces';\nimport MovieTrailerModal from './MovieTrailerModal';\n\nconst mapStateToProps = ({ trailer }: IStateTree) => ({ trailerState: trailer })\nconst mapDispatchToProps = {\n  getMovieTrailer,\n  resetMovieTrailer\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieTrailerModal)","import { Dispatch } from 'redux';\nimport { getMovieTrailers } from '../../../services';\nimport { IMovieTrailerFetchStartAction, IMovieTrailerFetchFailureAction, IMovieTrailer, IMovieTrailerFetchSuccessAction } from '../models';\nimport { MOVIE_TRAILER_FETCH_START, MOVIE_TRAILER_FETCH_FAILURE, MOVIE_TRAILER_FETCH_SUCCESS } from '../types';\n\nconst getMovieTrailerStart = (): IMovieTrailerFetchStartAction => ({\n  type: MOVIE_TRAILER_FETCH_START\n})\nconst getMovieTrailerFailure = (error: string): IMovieTrailerFetchFailureAction => ({\n  type: MOVIE_TRAILER_FETCH_FAILURE,\n  payload: error\n})\nconst getMovieTrailerSuccess = (data: IMovieTrailer): IMovieTrailerFetchSuccessAction => ({\n  type: MOVIE_TRAILER_FETCH_SUCCESS,\n  payload: data\n})\n\nexport default (movieId: number) => async (dispatch: Dispatch) => {\n  dispatch(getMovieTrailerStart());\n\n  try {\n    const response = await getMovieTrailers(movieId);\n    const { youtube } = response;\n    const trailer = youtube[0];\n    dispatch(getMovieTrailerSuccess(trailer));\n  } catch (e) {\n    const { message } = e as Error;\n    dispatch(getMovieTrailerFailure(message));\n  }\n}","export const MOVIE_TRAILER_FETCH_START = 'MOVIE_TRAILER_FETCH/START';\nexport const MOVIE_TRAILER_FETCH_FAILURE = 'MOVIE_TRAILER_FETCH/FAILED';\nexport const MOVIE_TRAILER_FETCH_SUCCESS = 'MOVIE_TRAILER_FETCH/SUCCESS'\nexport const MOVIE_TRAILER_FETCH_RESET = 'MOVIE_TRAILER_FETCH/RESET'","import { MOVIE_TRAILER_FETCH_RESET } from \"../types\";\nimport { IMovieTrailerResetAction } from \"../models\";\n\nexport default (): IMovieTrailerResetAction => ({\n  type: MOVIE_TRAILER_FETCH_RESET\n})\n","import React, { useState } from \"react\";\nimport { AiOutlineStar, AiFillStar } from \"react-icons/ai\";\nimport { MdWatchLater } from \"react-icons/md\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { MovieTrailerModalContainer } from \"../../containers\";\nimport { getTMDBImageURL } from \"../../util\";\nimport { IProps } from \"./interfaces\";\nimport \"./styles.css\";\n\nconst moviePosterWidth = 185;\nconst watchLaterFillColor = \"grey\";\nconst watchLaterActiveFillColor = \"orange\";\nconst starFillColor = \"lightgrey\";\nconst starActiveFillColor = \"yellow\";\n\nconst MovieCard = ({\n  movie,\n  favorite = false,\n  watchLater = false,\n  onAddToFavorites,\n  onAddToWatchLater,\n  onRemoveFromFavorites,\n  onRemoveFromWatchLater,\n}: IProps) => {\n  const [trailerModalOpen, setModalTrailerOpen] = useState(false);\n  const { poster_path: posterPath, original_title: originalTitle } = movie;\n  const intl = useIntl();\n\n  return (\n    <>\n      <div className=\"movie-card\">\n        <button\n          type=\"button\"\n          title={intl.formatMessage({\n            id: `movie.${favorite ? \"removeFromFavorites\" : \"addToFavorites\"}`,\n          })}\n          onClick={favorite ? onRemoveFromFavorites : onAddToFavorites}\n          className=\"movie-card__action-btn movie-card__fav-btn\"\n        >\n          {favorite ? (\n            <AiFillStar fill={starActiveFillColor} />\n          ) : (\n            <AiOutlineStar fill={starFillColor} />\n          )}\n        </button>\n\n        <button\n          type=\"button\"\n          title={intl.formatMessage({\n            id: `movie.${\n              watchLater ? \"removeFromWatchLater\" : \"addToWatchLater\"\n            }`,\n          })}\n          onClick={watchLater ? onRemoveFromWatchLater : onAddToWatchLater}\n          className=\"movie-card__action-btn movie-card__watch-later-btn\"\n        >\n          {watchLater ? (\n            <MdWatchLater fill={watchLaterActiveFillColor} />\n          ) : (\n            <MdWatchLater fill={watchLaterFillColor} />\n          )}\n        </button>\n        <div\n          onClick={() => setModalTrailerOpen(true)}\n          className=\"movie-card__content\"\n        >\n          {posterPath ? (\n            <img\n              className=\"movie-card__poster\"\n              src={getTMDBImageURL(posterPath, moviePosterWidth)}\n              alt={originalTitle}\n            />\n          ) : (\n            <div className=\"movie-card__poster-missing\">\n              <FormattedMessage id=\"movie.posterMissing\" />\n            </div>\n          )}\n        </div>\n        <div className=\"movie-card__title\">{originalTitle}</div>\n      </div>\n      {trailerModalOpen && (\n        <MovieTrailerModalContainer\n          movie={movie}\n          onRequestClose={() => setModalTrailerOpen(false)}\n        />\n      )}\n    </>\n  );\n};\n\nexport default MovieCard;\n","import { tmdbImageBaseUrl } from \"../config\";\n\nexport const getTMDBImageURL = (\n  imageRelativeURL: string,\n  imageWidth: number\n) => {\n  return `${tmdbImageBaseUrl}/w${imageWidth}${imageRelativeURL}`;\n};\n","import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport MovieCard from \"../MovieCard\";\nimport { IProps } from \"./interfaces\";\nimport \"./styles.css\";\n\nconst MovieGrid = ({\n  movies,\n  favorites,\n  watchLater,\n  onAddToFavorites,\n  onRemoveFromFavorites,\n  onAddToWatchLater,\n  onRemoveFromWatchLater,\n}: IProps) => {\n  if (movies.length === 0) {\n    return (\n      <div className=\"movie-grid__no-results\">\n        <FormattedMessage id=\"movie.noResults\" />\n      </div>\n    );\n  }\n  return (\n    <div className=\"movie-grid\">\n      {movies.map((movie) => {\n        const isFavorite = favorites[movie.id] !== undefined;\n        const isWatchLater = watchLater[movie.id] !== undefined;\n        return (\n          <MovieCard\n            key={movie.id}\n            movie={movie}\n            favorite={isFavorite}\n            watchLater={isWatchLater}\n            onAddToFavorites={() => onAddToFavorites(movie)}\n            onAddToWatchLater={() => onAddToWatchLater(movie)}\n            onRemoveFromFavorites={() => onRemoveFromFavorites(movie)}\n            onRemoveFromWatchLater={() => onRemoveFromWatchLater(movie)}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default MovieGrid;\n","import React from \"react\";\nimport cn from \"classnames\";\nimport { FormattedMessage } from \"react-intl\";\nimport { IProps } from \"./interfaces\";\nimport \"./styles.css\";\n\nconst Pagination = ({\n  page,\n  totalPages,\n  onNextClick,\n  onPreviousClick,\n}: IProps) => {\n  const isLastPage = page === totalPages;\n  const isFirstPage = page === 1;\n\n  return (\n    <div className=\"pagination\">\n      <div className=\"pagination__prev-container\">\n        <button\n          type=\"button\"\n          onClick={onPreviousClick}\n          disabled={isFirstPage}\n          className={cn(\"pagination__btn\")}\n        >\n          <FormattedMessage id=\"pagination.previous\" />\n        </button>\n      </div>\n      <div className=\"pagination__next-container\">\n        <button\n          type=\"button\"\n          onClick={onNextClick}\n          disabled={isLastPage}\n          className={cn(\"pagination__btn\")}\n        >\n          <FormattedMessage id=\"pagination.next\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport { IProps } from \"./interfaces\";\nimport \"./styles.css\";\n\nconst Modal = ({ onRequestClose, children }: IProps) => (\n  <div onClick={onRequestClose} className=\"full-screen-modal\">\n    <div\n      onClick={(event) => event.stopPropagation()}\n      className=\"modal__content\"\n    >\n      {children}\n    </div>\n  </div>\n);\n\nexport default Modal;\n","import React from \"react\";\nimport Youtube from \"react-youtube\";\nimport { IProps } from \"./interfaces\";\nimport \"./styles.css\";\n\nconst MovieTrailer = ({ trailer }: IProps) => {\n  const { source } = trailer;\n  return (\n    <div className=\"movie-trailer\">\n      <Youtube opts={{ width: \"100%\" }} videoId={source} />\n    </div>\n  );\n};\n\nexport default MovieTrailer;\n","import React from \"react\";\nimport { NavigationBar } from \"../../../components\";\nimport \"./styles.css\";\n\nconst MainLayout = ({\n  children,\n}: React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLDivElement>,\n  HTMLDivElement\n>) => (\n  <div className=\"main-layout\">\n    <NavigationBar />\n    <div className=\"main-layout__content\">{children}</div>\n  </div>\n);\n\nexport default MainLayout;\n","import React, { useCallback } from \"react\";\nimport debounce from \"lodash.debounce\";\nimport { SearchBar, Pagination } from \"../../../components\";\nimport { MovieSearchResultsContainer } from \"../../../containers\";\nimport { IProps } from \"./interfaces\";\nimport \"./styles.css\";\n\nconst SearchPage = ({\n  searchText,\n  setSearchText,\n  movieSearchState,\n  searchMovies,\n}: IProps) => {\n  const searchMoviesDebounced = useCallback(debounce(searchMovies, 700), [\n    searchMovies,\n  ]);\n\n  const handleSearchTextChange = useCallback(\n    (text: string) => {\n      setSearchText(text);\n      searchMoviesDebounced(text, 1);\n    },\n    [setSearchText, searchMoviesDebounced]\n  );\n\n  const handlePageChange = useCallback(\n    (newPage: number) => {\n      searchMovies(searchText, newPage);\n    },\n    [searchText, searchMovies]\n  );\n\n  const { data: results } = movieSearchState;\n\n  return (\n    <div className=\"search-page\">\n      <div className=\"search-page__search-bar-container\">\n        <SearchBar value={searchText} onChange={handleSearchTextChange} />\n      </div>\n      <div className=\"search-page__search-results-container\">\n        <MovieSearchResultsContainer />\n      </div>\n      {results && results.total_pages > 0 && (\n        <Pagination\n          totalPages={results.total_pages}\n          page={results.page}\n          onNextClick={() => handlePageChange(results.page + 1)}\n          onPreviousClick={() => handlePageChange(results.page - 1)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SearchPage;\n","import { connect } from 'react-redux';\nimport SearchPage from './SearchPage';\nimport { searchMovies, setSearchText } from '../../../store/movieSearch/actions';\nimport { IStateTree } from '../../../store/interfaces';\n\nconst mapStateToProps = ({ movieSearch, searchText }: IStateTree) => ({ movieSearchState: movieSearch, searchText })\nconst mapDispatchToProps = {\n  searchMovies,\n  setSearchText\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);","import { Dispatch } from 'redux';\nimport { searchMovies } from '../../../services';\nimport { MOVIE_SEARCH_START, MOVIE_SEARCH_SUCCESS, MOVIE_SEARCH_FAILURE } from '../types';\nimport { IMovieSearchStartAction, IMovieSearchFailureAction, IMovieSearchSuccessAction } from '../models/IMovieSearchActions';\nimport resetMovieSearch from './resetMovieSearch';\nimport { IMovieSearchResponse } from '../models';\n\nconst movieSearchStart = (): IMovieSearchStartAction => ({ type: MOVIE_SEARCH_START });\nconst movieSearchFailure = (errorMsg: string): IMovieSearchFailureAction => ({ type: MOVIE_SEARCH_FAILURE, payload: errorMsg });\nconst movieSearchSuccess = (data: IMovieSearchResponse): IMovieSearchSuccessAction => ({ type: MOVIE_SEARCH_SUCCESS, payload: data });\n\nexport default (query: string, page: number) => async (dispatch: Dispatch) => {\n  dispatch(movieSearchStart());\n\n  if (!query) {\n    return dispatch(resetMovieSearch())\n  }\n\n  try {\n    const response = await searchMovies(query, page);\n    dispatch(movieSearchSuccess(response));\n  } catch (error) {\n    const { message } = error as Error;\n    dispatch(movieSearchFailure(message));\n  }\n}","export const MOVIE_SEARCH_START = 'MOVIE_SEARCH/START';\nexport const MOVIE_SEARCH_FAILURE = 'MOVIE_SEARCH/FAILED';\nexport const MOVIE_SEARCH_SUCCESS = 'MOVIE_SEARCH/SUCCESS'\nexport const MOVIE_SEARCH_RESET = 'MOVIE_SEARCH/RESET'\n\nexport const SEARCH_TEXT_SET = 'SEARCH_TEXT/SET'","import { IMovieSearchResetAction } from \"../models\";\nimport { MOVIE_SEARCH_RESET } from \"../types\";\n\nexport default (): IMovieSearchResetAction => ({ type: MOVIE_SEARCH_RESET });\n","import { SEARCH_TEXT_SET } from '../types'\nimport { ISetSearchTextAction } from '../models';\n\nexport default (text: string): ISetSearchTextAction => ({\n  type: SEARCH_TEXT_SET,\n  payload: text\n})","import React from \"react\";\nimport { FavoriteMoviesContainer } from \"../../../containers\";\n\nconst FavoritesPage = () => <FavoriteMoviesContainer />;\n\nexport default FavoritesPage;\n","import React from \"react\";\nimport { WatchLaterMoviesContainer } from \"../../../containers\";\n\nconst WatchLaterPage = () => <WatchLaterMoviesContainer />;\n\nexport default WatchLaterPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { routerBaseName } from \"./config\";\nimport { MainLayout } from \"./views/layouts\";\nimport { SearchPage, FavoritesPage, WatchLaterPage } from \"./views/pages\";\n\nfunction App() {\n  return (\n    <Router basename={routerBaseName}>\n      <MainLayout>\n        <Route exact path=\"/\" component={SearchPage} />\n        <Route exact path=\"/favorites\" component={FavoritesPage} />\n        <Route exact path=\"/watch-later\" component={WatchLaterPage} />\n      </MainLayout>\n    </Router>\n  );\n}\n\nexport default App;\n","const { REACT_APP_ROUTER_BASE_NAME: routerBaseName = \"/\" } = process.env;\n\nexport { routerBaseName };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { MOVIE_SEARCH_START, MOVIE_SEARCH_FAILURE, MOVIE_SEARCH_SUCCESS, MOVIE_SEARCH_RESET } from '../types';\nimport { IMoviesFetchState, MovieSearchAction } from '../models';\n\n\nexport const initialState: IMoviesFetchState = {\n  isFetched: false,\n  isFetching: false,\n}\n\nexport default (state: IMoviesFetchState = initialState, action: MovieSearchAction): IMoviesFetchState => {\n  switch (action.type) {\n    case MOVIE_SEARCH_START:\n      return { ...initialState, isFetching: true };\n    case MOVIE_SEARCH_FAILURE:\n      return { ...initialState, isFetched: false, isFetching: false, error: action.payload };\n    case MOVIE_SEARCH_SUCCESS:\n      return { ...initialState, isFetched: true, isFetching: false, data: action.payload };\n    case MOVIE_SEARCH_RESET:\n      return initialState;\n    default:\n      return state;\n  }\n}","import { IFavorites, FavoriteAction } from \"../models\"\nimport { ADD_FAVORITE, REMOVE_FAVORITE } from \"../types\"\n\nexport const initialState: IFavorites = {}\n\nexport default (state: IFavorites = initialState, action: FavoriteAction) => {\n  switch (action.type) {\n    case ADD_FAVORITE: {\n      const { id } = action.payload;\n      return { ...state, [id]: action.payload };\n    }\n    case REMOVE_FAVORITE: {\n      const { id } = action.payload;\n      delete state[id];\n      return { ...state };\n    }\n    default:\n      return state;\n  }\n}","import { IWatchLater, WatchLaterActions } from \"../models\"\nimport { ADD_WATCH_LATER, REMOVE_WATCH_LATER } from \"../types\";\n\nexport const initialState: IWatchLater = {};\n\nexport default (state: IWatchLater = initialState, action: WatchLaterActions) => {\n  switch (action.type) {\n    case ADD_WATCH_LATER: {\n      const { id } = action.payload;\n      return { ...state, [id]: action.payload };\n    }\n    case REMOVE_WATCH_LATER: {\n      const { id } = action.payload;\n      delete state[id];\n      return { ...state };\n    }\n    default:\n      return state;\n  }\n}","import { MOVIE_TRAILER_FETCH_SUCCESS, MOVIE_TRAILER_FETCH_FAILURE, MOVIE_TRAILER_FETCH_START, MOVIE_TRAILER_FETCH_RESET } from '../types';\nimport { IMovieTrailerFetchState, MovieTrailerActions } from '../models';\n\n\nexport const initialState: IMovieTrailerFetchState = {\n  isFetched: false,\n  isFetching: false,\n}\n\nexport default (state: IMovieTrailerFetchState = initialState, action: MovieTrailerActions): IMovieTrailerFetchState => {\n  switch (action.type) {\n    case MOVIE_TRAILER_FETCH_START:\n      return { ...initialState, isFetching: true };\n    case MOVIE_TRAILER_FETCH_FAILURE:\n      return { ...initialState, isFetched: false, isFetching: false, error: action.payload };\n    case MOVIE_TRAILER_FETCH_SUCCESS:\n      return { ...initialState, isFetched: true, isFetching: false, data: action.payload };\n    case MOVIE_TRAILER_FETCH_RESET:\n      return initialState;\n    default:\n      return state;\n  }\n}","import { Reducer, AnyAction, combineReducers } from \"redux\";\nimport { IStateTree } from \"./interfaces\";\nimport { movieSearchReducer } from \"./movieSearch/reducers\";\nimport { favoritesReducer } from \"./favorites/reducers\";\nimport { watchLaterReducer } from \"./watchLater/reducers\";\nimport { movieTrailerReducer } from \"./movieTrailer/reducers\";\nimport searchTextReducer from \"./movieSearch/reducers/searchTextReducer\";\n\ntype IRootReducer = Reducer<IStateTree, AnyAction>;\nconst rootReducer: IRootReducer = combineReducers({\n  movieSearch: movieSearchReducer,\n  favorites: favoritesReducer,\n  watchLater: watchLaterReducer,\n  trailer: movieTrailerReducer,\n  searchText: searchTextReducer,\n});\n\nexport default rootReducer;\n","import { SEARCH_TEXT_SET } from '../types';\nimport { ISetSearchTextAction } from '../models';\n\nconst initialState = '';\n\nexport default (state: string = initialState, action: ISetSearchTextAction): string => {\n  switch (action.type) {\n    case SEARCH_TEXT_SET:\n      return action.payload;\n    default:\n      return state;\n  }\n}","import { applyMiddleware, createStore, Middleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"./rootReducer\";\n\nconst persistConfig = {\n  key: \"my-cinema\",\n  whitelist: [\"favorites\", \"watchLater\"],\n  storage,\n};\n\nconst middleware: Middleware[] = [thunk];\n\nexport const persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = createStore(\n  persistedReducer,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\nexport const persistor = persistStore(store);\n","import en from \"./en\";\n\nexport default {\n  en,\n};\n","import searchBar from './searchBar';\nimport navBar from './navBar';\nimport movie from './movie';\nimport pagination from './pagination';\nimport movieTrailer from './movieTrailer';\n\nexport default {\n  ...searchBar,\n  ...navBar,\n  ...movie,\n  ...pagination,\n  ...movieTrailer\n}","export default {\n  'searchBar.placeholder': 'Type the name of a movie'\n}","export default {\n  'navBar.search': 'search',\n  'navBar.watchLater': 'watch later',\n  'navBar.favorites': 'favorites',\n  'navBar.title': 'My Cinema'\n}","export default {\n  'movie.posterMissing': 'no preview available',\n  'movie.noResults': 'no movies here',\n  'movie.addToFavorites': 'Add to favorites',\n  'movie.addToWatchLater': 'Add to watch later',\n  'movie.removeFromFavorites': 'Remove from favorites',\n  'movie.removeFromWatchLater': 'Remove from watch later'\n}","export default {\n  'pagination.next': 'next',\n  'pagination.previous': 'previous',\n}","export default {\n  'movieTrailer.notFound': 'Trailer not found'\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { IntlProvider } from \"react-intl\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store, persistor } from \"./store\";\nimport locale from \"./locale\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <IntlProvider locale=\"en\" messages={locale.en}>\n          <App />\n        </IntlProvider>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}