{"version":3,"sources":["components/SearchBar/SearchBar.tsx","components/NavigationBar/NavigationBar.tsx","config/tmdb.ts","components/MovieCard/MovieCard.tsx","util/tmdb.ts","components/MovieGrid/MovieGrid.tsx","components/Pagination/Pagination.tsx","views/layouts/MainLayout/MainLayout.tsx","containers/MovieGrid/MovieGridContainer.tsx","containers/MovieGrid/index.ts","store/favorites/actions/addFavorite.ts","store/favorites/types/index.ts","store/favorites/actions/removeFavorite.ts","store/watchLater/actions/removeWatchLater.ts","store/watchLater/types/index.ts","store/watchLater/actions/addWatchLater.ts","containers/MovieSearchResults/MovieSearchResultsContainer.tsx","containers/MovieSearchResults/index.ts","containers/FavoriteMovies/FavoriteMoviesContainer.tsx","containers/FavoriteMovies/index.ts","containers/WatchLaterMovies/WatchLaterMoviesContainer.tsx","containers/WatchLaterMovies/index.ts","views/pages/Search/SearchPage.tsx","services/tmdb/tmdb.ts","views/pages/Search/index.ts","store/movieSearch/actions/searchMovies.ts","store/movieSearch/types/index.ts","views/pages/Favorites/FavoritesPage.tsx","views/pages/WatchLater/WatchLaterPage.tsx","App.tsx","serviceWorker.ts","store/movieSearch/reducers/movieSearch.ts","store/favorites/reducers/favoritesReducer.ts","store/watchLater/reducers/watchLaterReducer.ts","store/rootReducer.ts","store/index.ts","locale/index.ts","locale/en/index.ts","locale/en/searchBar.ts","locale/en/navBar.ts","locale/en/movie.ts","locale/en/pagination.ts","index.tsx"],"names":["SearchBar","onChange","intl","useIntl","Form","Control","placeholder","formatMessage","id","type","value","target","NavigationBar","useState","mobileMenuOpen","setMobileMenuOpen","toggleMobileMenu","useCallback","className","cn","onClick","to","color","size","process","REACT_APP_TMDB_API_KEY","tmdbAPIKey","REACT_APP_TMDB_API_URL","tmdbAPIURL","REACT_APP_TMDB_IMAGE_BASE_URL","tmdbImageBaseUrl","MovieCard","imageRelativeURL","imageWidth","movie","favorite","watchLater","onAddToFavorites","onAddToWatchLater","onRemoveFromFavorites","onRemoveFromWatchLater","posterPath","poster_path","originalTitle","original_title","fill","src","alt","MovieGrid","movies","favorites","length","map","isFavorite","undefined","isWatchLater","key","Pagination","page","totalPages","onNextClick","onPreviousClick","isLastPage","isFirstPage","disabled","MainLayout","children","MovieGridContainer","addFavorite","removeFavorite","addWatchLater","removeWatchLater","mapDispatchToProps","payload","connect","MovieSearchResultsContainer","movieSearchState","isFetching","isFetched","data","error","results","movieSearch","FavoriteMoviesContainer","favoriteMovies","Object","values","WatchLaterMoviesContainer","SearchPage","searchMovies","searchTerm","setSearchTerm","getMovies","query","handleSearchTermChange","debounce","text","handlePageChange","newPage","MovieSearchResults","total_pages","a","apiURL","apiKey","fetch","stringify","api_key","response","json","dispatch","message","FavoritesPage","FavoriteMovies","WatchLaterPage","WatchLaterMovies","App","basename","exact","path","component","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","state","action","persistConfig","whitelist","storage","middleware","thunk","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","en","ReactDOM","render","StrictMode","loading","locale","messages","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"4aAeeA,EAVG,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SACbC,EAAOC,cACb,OACE,kBAACC,EAAA,EAAKC,QAAN,CACEC,YAAaJ,EAAKK,cAAc,CAAEC,GAAI,0BACtCC,KAAK,OACLR,SAAU,gBAAaS,EAAb,EAAGC,OAAUD,MAAb,OAA2BT,EAASS,O,wDCiBrCE,EApBO,WAAO,IAAD,EACkBC,oBAAS,GAD3B,mBACnBC,EADmB,KACHC,EADG,KAEpBC,EAAmBC,uBAAY,WACnCF,GAAmBD,KAClB,CAACA,EAAgBC,IAEpB,OACE,yBAAKG,UAAU,kBACb,yBAAKA,UAAU,yBAAwB,kBAAC,IAAD,CAAkBV,GAAG,kBAC5D,yBAAKU,UAAWC,IAAG,uBAAwB,CAAE,oCAAqCL,KAChF,kBAAC,IAAD,CAAMM,QAASJ,EAAkBE,UAAU,6BAA6BG,GAAG,IAAG,kBAAC,IAAD,CAAkBb,GAAG,mBACnG,kBAAC,IAAD,CAAMY,QAASJ,EAAkBE,UAAU,6BAA6BG,GAAG,aAAY,kBAAC,IAAD,CAAkBb,GAAG,sBAC5G,kBAAC,IAAD,CAAMY,QAASJ,EAAkBE,UAAU,6BAA6BG,GAAG,eAAc,kBAAC,IAAD,CAAkBb,GAAG,uBAC9G,4BAAQY,QAASJ,EAAkBE,UAAU,kCAAiC,kBAAC,IAAD,CAAgBI,MAAM,YAEtG,4BAAQF,QAASJ,EAAkBE,UAAU,4BAA2B,kBAAC,IAAD,CAAiBK,KAAM,GAAID,MAAM,a,UCvBoCE,uS,IAA3IC,uBAAwBC,O,MAAa,G,MAAIC,uBAAwBC,O,MAAa,G,MAAIC,8BAA+BC,O,MAAmB,G,ECuC7HC,G,MAxBG,SAAC,GAAiJ,ICbpIC,EAA0BC,EDarCC,EAA8I,EAA9IA,MAA8I,IAAvIC,gBAAuI,aAArHC,kBAAqH,SAAjGC,EAAiG,EAAjGA,iBAAkBC,EAA+E,EAA/EA,kBAAmBC,EAA4D,EAA5DA,sBAAuBC,EAAqC,EAArCA,uBACvGC,EAA8CP,EAA3DQ,YAAyCC,EAAkBT,EAAlCU,eAEjC,OACE,yBAAK1B,UAAU,cACb,4BAAQE,QAASe,EAAWI,EAAwBF,EAAkBnB,UAAU,8CAC7EiB,EAAW,kBAAC,IAAD,CAAYU,KATJ,WASoC,kBAAC,IAAD,CAAeA,KAVzD,eAahB,4BAAQzB,QAASgB,EAAaI,EAAyBF,EAAmBpB,UAAU,sDACjFkB,EAAa,kBAAC,IAAD,CAAcS,KAfF,WAewC,kBAAC,IAAD,CAAcA,KAhB5D,UAoBpBJ,EACE,yBAAKvB,UAAU,qBAAqB4B,KC5Bdd,ED4BmCS,EC5BTR,EDMjC,ICLjB,GAAN,OAAUH,EAAV,aAA+BG,GAA/B,OAA4CD,ID2BoDe,IAAKJ,IAC3F,yBAAKzB,UAAU,8BAA6B,kBAAC,IAAD,CAAkBV,GAAG,yBAGvE,yBAAKU,UAAU,qBAAqByB,MEA3BK,G,MA5BG,SAAC,GAAmI,IAAjIC,EAAgI,EAAhIA,OAAQC,EAAwH,EAAxHA,UAAWd,EAA6G,EAA7GA,WAAYC,EAAiG,EAAjGA,iBAAkBE,EAA+E,EAA/EA,sBAAuBD,EAAwD,EAAxDA,kBAAmBE,EAAqC,EAArCA,uBAC9G,OAAsB,IAAlBS,EAAOE,OACF,yBAAKjC,UAAU,0BAAyB,kBAAC,IAAD,CAAkBV,GAAG,qBAGpE,yBAAKU,UAAU,cAEX+B,EAAOG,KAAI,SAAAlB,GACT,IAAMmB,OAAqCC,IAAxBJ,EAAUhB,EAAM1B,IAC7B+C,OAAwCD,IAAzBlB,EAAWF,EAAM1B,IACtC,OACE,kBAAC,EAAD,CACEgD,IAAKtB,EAAM1B,GACX0B,MAAOA,EACPC,SAAUkB,EACVjB,WAAYmB,EACZlB,iBAAkB,kBAAMA,EAAiBH,IACzCI,kBAAmB,kBAAMA,EAAkBJ,IAC3CK,sBAAuB,kBAAMA,EAAsBL,IACnDM,uBAAwB,kBAAMA,EAAuBN,YCHpDuB,G,MAhBI,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,KAAMC,EAAuD,EAAvDA,WAAYC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,gBAC7CC,EAAaJ,IAASC,EACtBI,EAAuB,IAATL,EAEpB,OACE,yBAAKxC,UAAU,cACb,yBAAKA,UAAU,8BACb,4BAAQE,QAASyC,EAAiBG,SAAUD,EAAa7C,UAAWC,IAAG,oBAAoB,kBAAC,IAAD,CAAkBX,GAAG,0BAElH,yBAAKU,UAAU,8BACb,4BAAQE,QAASwC,EAAaI,SAAUF,EAAY5C,UAAWC,IAAG,oBAAoB,kBAAC,IAAD,CAAkBX,GAAG,yBCHpGyD,G,MATI,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACjB,yBAAKhD,UAAU,eACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,wBACZgD,M,iBCQQC,EAZY,SAAC,GAAD,IAAGlB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,UAAWd,EAAtB,EAAsBA,WAAYgC,EAAlC,EAAkCA,YAAaC,EAA/C,EAA+CA,eAAgBC,EAA/D,EAA+DA,cAAeC,EAA9E,EAA8EA,iBAA9E,OACzB,kBAAC,EAAD,CACEtB,OAAQA,EACRC,UAAWA,EACXd,WAAYA,EACZC,iBAAkB+B,EAClB7B,sBAAuB8B,EACvB/B,kBAAmBgC,EACnB9B,uBAAwB+B,KCNtBC,EAAqB,CACzBJ,YCHa,SAAClC,GAAD,MAAwC,CACrDzB,KCL0B,eDM1BgE,QAASvC,IDETmC,eGJa,SAACnC,GAAD,MAA2C,CACxDzB,KDJ6B,kBCK7BgE,QAASvC,IHGTqC,iBILa,SAACrC,GAAD,MAA6C,CAC1DzB,KCJgC,qBDKhCgE,QAASvC,IJIToC,cMNa,SAACpC,GAAD,MAA0C,CACvDzB,KDL6B,kBCM7BgE,QAASvC,KNSIwC,eAFS,SAAC,GAAD,MAA4C,CAAExB,UAA9C,EAAGA,UAAsDd,WAAzD,EAAcA,cAEEoC,EAAzBE,CAA6CP,GOE7CQ,EAbqB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,iBAC7BC,EAAuCD,EAAvCC,WAAYC,EAA2BF,EAA3BE,UAAWC,EAAgBH,EAAhBG,KAAMC,EAAUJ,EAAVI,MACrC,GAAIH,IAAeC,IAAcC,EAC/B,OAAO,KAET,GAAIC,EACF,OAAO,6BAAMA,GANqD,IASnD/B,EAAW8B,EAApBE,QACR,OAAO,kBAAC,EAAD,CAAoBhC,OAAQA,KCRtByB,eAFS,SAAC,GAAD,MAAkC,CAAEE,iBAApC,EAAGM,eAEZR,CAAyBC,GCIzBQ,EALiB,SAAC,GAA2B,IAAzBjC,EAAwB,EAAxBA,UAC3BkC,EAAiBC,OAAOC,OAAOpC,GACrC,OAAO,kBAAC,EAAD,CAAoBD,OAAQmC,KCDtBV,eAFS,SAAC,GAAD,MAAgC,CAAExB,UAAlC,EAAGA,aAEZwB,CAAyBS,GCIzBA,EALiB,SAAC,GAA4B,IAA1B/C,EAAyB,EAAzBA,WAC3BgD,EAAiBC,OAAOC,OAAOlD,GACrC,OAAO,kBAAC,EAAD,CAAoBa,OAAQmC,KCDtBV,eAFS,SAAC,GAAD,MAAiC,CAAEtC,WAAnC,EAAGA,cAEZsC,CAAyBa,GCyCzBC,G,MAxCI,SAAC,GAAgD,IAA9CZ,EAA6C,EAA7CA,iBAAkBa,EAA2B,EAA3BA,aAA2B,EAC7B5E,mBAAS,IADoB,mBAC1D6E,EAD0D,KAC9CC,EAD8C,KAG3DC,EAAY3E,uBAAY,SAAC4E,EAAenC,GAC5C+B,EAAaI,EAAOnC,KACnB,CAAC+B,IAEEK,EAAyB7E,sBAAY8E,KAAS,SAACC,GACnDL,EAAcK,GACdJ,EAAUI,EAAM,KACf,KAAM,CAACL,EAAeC,IAEnBK,EAAmBhF,uBAAY,SAACiF,GACpCN,EAAUF,EAAYQ,KACrB,CAACR,EAAYE,IAEFX,EAAYL,EAAlBG,KAER,OACE,yBAAK7D,UAAU,eACb,yBAAKA,UAAU,qCACb,kBAAC,EAAD,CAAWjB,SAAU6F,KAEvB,yBAAK5E,UAAU,yCACb,kBAACiF,EAAD,OAGAlB,GAAWA,EAAQmB,YAAc,GAC/B,kBAAC,EAAD,CACEzC,WAAYsB,EAAQmB,YACpB1C,KAAMuB,EAAQvB,KACdE,YAAa,kBAAMqC,EAAiBhB,EAAQvB,KAAO,IACnDG,gBAAiB,kBAAMoC,EAAiBhB,EAAQvB,KAAO,S,iCCnCtD+B,EAAY,uCAAG,WAAOI,GAAP,mCAAAQ,EAAA,6DAAsB3C,EAAtB,+BAAqC,EAAG4C,EAAxC,+BAAyD1E,EAAY2E,EAArE,+BAAsF7E,EAAtF,SACH8E,MAAM,GAAD,OAAIF,EAAJ,yBAA2BG,oBAAU,CAAEZ,QAAOa,QAASH,EAAQ7C,WADjE,cACpBiD,EADoB,gBAEeA,EAASC,OAFxB,cAEpBA,EAFoB,yBAGnBA,GAHmB,4CAAH,sDCEnBpC,EAAqB,CACzBiB,aCIa,SAACI,EAAenC,GAAhB,8CAAiC,WAAOmD,GAAP,mBAAAR,EAAA,yDAC9CQ,EANuD,CAAEpG,KCNzB,uBDc3BoF,EAHyC,yCAIrCgB,EAN8C,CAAEpG,KCNzB,wBDQc,gCAQrBgF,EAAaI,EAAOnC,GARC,OAQtCiD,EARsC,OAS5CE,EAZmF,CAAEpG,KCNrD,uBDMiFgE,QAYrFkC,IATgB,yDAWpCG,EAXoC,EAWpCA,QACRD,EAhByE,CAAEpG,KCN3C,sBDMuEgE,QAgB3EqC,IAZgB,0DAAjC,wDDFApC,eAJS,SAAC,GAAD,MAAkC,CAAEE,iBAApC,EAAGM,eAIaV,EAAzBE,CAA6Cc,GGJ7CuB,EAFO,kBAAM,kBAACC,EAAD,OCEbC,GAFQ,kBAAM,kBAACC,EAAD,OCgBdC,OAbf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,0CACf,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/B,IACjC,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,aAAaC,UAAWR,IAC1C,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,eAAeC,UAAWN,QCAhCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oECdOC,GAAkC,CAC7C/C,WAAW,EACXD,YAAY,G,SCHDgD,GAA2B,GCA3BA,GAA4B,GCU1BC,GANmBC,2BAAgB,CAChD7C,YHCa,WAA4F,IAA3F8C,EAA0F,uDAA/DH,GAAcI,EAAiD,uCACxG,OAAQA,EAAOxH,MACb,ILX8B,qBKY5B,OAAO,6BAAKoH,IAAZ,IAA0BhD,YAAY,IACxC,ILZgC,sBKa9B,OAAO,6BAAKgD,IAAZ,IAA0B/C,WAAW,EAAOD,YAAY,EAAOG,MAAOiD,EAAOxD,UAC/E,ILbgC,uBKc9B,OAAO,6BAAKoD,IAAZ,IAA0B/C,WAAW,EAAMD,YAAY,EAAOE,KAAMkD,EAAOxD,UAC7E,ILd8B,qBKe5B,OAAOoD,GACT,QACE,OAAOG,IGXX9E,UFJa,WAA+D,IAA9D8E,EAA6D,uDAAzCH,GAAcI,EAA2B,uCAC3E,OAAQA,EAAOxH,MACb,IrBPwB,eqBOJ,IACVD,EAAOyH,EAAOxD,QAAdjE,GACR,OAAO,6BAAKwH,GAAZ,mBAAoBxH,EAAKyH,EAAOxD,UAElC,IrBV2B,kBqBUJ,IACbjE,EAAOyH,EAAOxD,QAAdjE,GAER,cADOwH,EAAMxH,GACN,gBAAKwH,GAEd,QACE,OAAOA,IEPX5F,WDLa,WAAmE,IAAlE4F,EAAiE,uDAA5CH,GAAcI,EAA8B,uCAC/E,OAAQA,EAAOxH,MACb,InBP2B,kBmBOJ,IACbD,EAAOyH,EAAOxD,QAAdjE,GACR,OAAO,6BAAKwH,GAAZ,mBAAoBxH,EAAKyH,EAAOxD,UAElC,InBV8B,qBmBUJ,IAChBjE,EAAOyH,EAAOxD,QAAdjE,GAER,cADOwH,EAAMxH,GACN,gBAAKwH,GAEd,QACE,OAAOA,METPE,GAAgB,CACpB1E,IAAK,YACL2E,UAAW,CAAC,YAAa,cACzBC,cAGIC,GAA2B,CAACC,MAErBC,GAAmBC,aAAeN,GAAeJ,IACjDW,GAAQC,uBAAYH,GAAkBI,+BAAoBC,mBAAe,WAAf,EAAmBP,MAC7EQ,GAAYC,aAAaL,IChBvB,IACbM,GCEa,uDCLA,CACb,wBAAyB,6BCDZ,CACb,gBAAiB,SACjB,oBAAqB,cACrB,mBAAoB,YACpB,eAAgB,cCJH,CACb,sBAAuB,uBACvB,kBAAmB,mBCFN,CACb,kBAAmB,OACnB,sBAAuB,c,MCUzBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUT,MAAOA,IACf,kBAAC,IAAD,CAAaU,QAAS,KAAMN,UAAWA,IACrC,kBAAC,IAAD,CAAcO,OAAO,KAAKC,SAAUD,GAAOL,IACzC,kBAAC,GAAD,UAKRO,SAASC,eAAe,SZqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9E,GACL+E,QAAQ/E,MAAMA,EAAM8B,c","file":"static/js/main.6c6c07c6.chunk.js","sourcesContent":["import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Form from 'react-bootstrap/Form';\nimport { IProps } from './interfaces';\n\nconst SearchBar = ({ onChange }: IProps) => {\n  const intl = useIntl();\n  return (\n    <Form.Control\n      placeholder={intl.formatMessage({ id: 'searchBar.placeholder' })}\n      type=\"text\"\n      onChange={({ target: { value } }) => onChange(value)} />\n  );\n}\n\nexport default SearchBar;","import React, { useState, useCallback } from 'react';\nimport cn from 'classnames';\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\nimport { FormattedMessage } from 'react-intl';\n\nconst NavigationBar = () => {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const toggleMobileMenu = useCallback(() => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  }, [mobileMenuOpen, setMobileMenuOpen])\n\n  return (\n    <div className='navigation-bar' >\n      <div className='navigation-bar__title'><FormattedMessage id='navBar.title' /></div>\n      <div className={cn('navigation-bar__menu', { 'navigation-bar__menu--mobile-open': mobileMenuOpen })}>\n        <Link onClick={toggleMobileMenu} className='navigation-bar__menu__item' to=''><FormattedMessage id='navBar.search' /></Link>\n        <Link onClick={toggleMobileMenu} className='navigation-bar__menu__item' to='favorites'><FormattedMessage id='navBar.favorites' /></Link>\n        <Link onClick={toggleMobileMenu} className='navigation-bar__menu__item' to='watch-later'><FormattedMessage id='navBar.watchLater' /></Link>\n        <button onClick={toggleMobileMenu} className='navigation-bar__menu-close-btn'><AiOutlineClose color='white' /></button>\n      </div>\n      <button onClick={toggleMobileMenu} className='navigation-bar__menu-btn'><GiHamburgerMenu size={20} color='white' /></button>\n    </div >\n  );\n}\n\nexport default NavigationBar;","const { REACT_APP_TMDB_API_KEY: tmdbAPIKey = '', REACT_APP_TMDB_API_URL: tmdbAPIURL = '', REACT_APP_TMDB_IMAGE_BASE_URL: tmdbImageBaseUrl = '' } = process.env;\n\nexport { tmdbAPIKey, tmdbAPIURL, tmdbImageBaseUrl };","import React from 'react';\nimport { AiOutlineStar, AiFillStar } from 'react-icons/ai';\nimport { MdWatchLater } from 'react-icons/md';\nimport { getTMDBImageURL } from '../../util';\nimport { IProps } from './interfaces';\nimport './styles.css';\nimport { FormattedMessage } from 'react-intl';\n\nconst moviePosterWidth = 185;\nconst watchLaterFillColor = 'grey';\nconst watchLaterActiveFillColor = 'orange';\nconst starFillColor = 'lightgrey';\nconst starActiveFillColor = 'yellow';\n\n\nconst MovieCard = ({ movie, favorite = false, watchLater = false, onAddToFavorites, onAddToWatchLater, onRemoveFromFavorites, onRemoveFromWatchLater }: IProps) => {\n  const { poster_path: posterPath, original_title: originalTitle } = movie;\n\n  return (\n    <div className='movie-card'>\n      <button onClick={favorite ? onRemoveFromFavorites : onAddToFavorites} className='movie-card__action-btn movie-card__fav-btn'>\n        {favorite ? <AiFillStar fill={starActiveFillColor} /> : <AiOutlineStar fill={starFillColor} />}\n      </button>\n\n      <button onClick={watchLater ? onRemoveFromWatchLater : onAddToWatchLater} className='movie-card__action-btn movie-card__watch-later-btn'>\n        {watchLater ? <MdWatchLater fill={watchLaterActiveFillColor} /> : <MdWatchLater fill={watchLaterFillColor} />}\n      </button>\n\n      {\n        posterPath ?\n          <img className='movie-card__poster' src={getTMDBImageURL(posterPath, moviePosterWidth)} alt={originalTitle} />\n          : <div className='movie-card__poster-missing'><FormattedMessage id='movie.posterMissing' /></div>\n      }\n\n      <div className='movie-card__title'>{originalTitle}</div>\n    </div>\n  )\n}\n\nexport default MovieCard;","import { tmdbImageBaseUrl } from '../config';\n\nexport const getTMDBImageURL = (imageRelativeURL: string, imageWidth: number) => {\n  return `${tmdbImageBaseUrl}/w${imageWidth}${imageRelativeURL}`;\n}","import React from 'react';\nimport MovieCard from '../MovieCard';\nimport { IProps } from './interfaces';\nimport './styles.css';\nimport { FormattedMessage } from 'react-intl';\n\nconst MovieGrid = ({ movies, favorites, watchLater, onAddToFavorites, onRemoveFromFavorites, onAddToWatchLater, onRemoveFromWatchLater }: IProps) => {\n  if (movies.length === 0) {\n    return <div className='movie-grid__no-results'><FormattedMessage id='movie.noResults' /></div>\n  }\n  return (\n    <div className='movie-grid'>\n      {\n        movies.map(movie => {\n          const isFavorite = favorites[movie.id] !== undefined;\n          const isWatchLater = watchLater[movie.id] !== undefined;\n          return (\n            <MovieCard\n              key={movie.id}\n              movie={movie}\n              favorite={isFavorite}\n              watchLater={isWatchLater}\n              onAddToFavorites={() => onAddToFavorites(movie)}\n              onAddToWatchLater={() => onAddToWatchLater(movie)}\n              onRemoveFromFavorites={() => onRemoveFromFavorites(movie)}\n              onRemoveFromWatchLater={() => onRemoveFromWatchLater(movie)}\n            />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default MovieGrid;","import React from 'react';\nimport cn from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { IProps } from './interfaces';\nimport './styles.css';\n\nconst Pagination = ({ page, totalPages, onNextClick, onPreviousClick }: IProps) => {\n  const isLastPage = page === totalPages;\n  const isFirstPage = page === 1;\n\n  return (\n    <div className='pagination'>\n      <div className='pagination__prev-container'>\n        <button onClick={onPreviousClick} disabled={isFirstPage} className={cn('pagination__btn')}><FormattedMessage id='pagination.previous' /></button>\n      </div>\n      <div className='pagination__next-container'>\n        <button onClick={onNextClick} disabled={isLastPage} className={cn('pagination__btn')}><FormattedMessage id='pagination.next' /></button>\n      </div>\n    </div>\n  )\n}\n\nexport default Pagination;","import React from 'react';\nimport { NavigationBar } from '../../../components';\nimport './styles.css';\n\nconst MainLayout = ({ children }: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>) => (\n  <div className='main-layout'>\n    <NavigationBar />\n    <div className='main-layout__content'>\n      {children}\n    </div>\n  </div>\n)\n\nexport default MainLayout;","import React from 'react';\nimport { IProps } from './interfaces';\nimport { MovieGrid } from '../../components';\n\nconst MovieGridContainer = ({ movies, favorites, watchLater, addFavorite, removeFavorite, addWatchLater, removeWatchLater }: IProps) => (\n  <MovieGrid\n    movies={movies}\n    favorites={favorites}\n    watchLater={watchLater}\n    onAddToFavorites={addFavorite}\n    onRemoveFromFavorites={removeFavorite}\n    onAddToWatchLater={addWatchLater}\n    onRemoveFromWatchLater={removeWatchLater}\n  />\n);\n\nexport default MovieGridContainer;","import { connect } from 'react-redux';\nimport { addFavorite, removeFavorite } from '../../store/favorites/actions';\nimport { addWatchLater, removeWatchLater } from '../../store/watchLater/actions';\nimport MovieGridContainer from './MovieGridContainer';\nimport { IStateTree } from '../../store/interfaces';\n\nconst mapDispatchToProps = {\n  addFavorite,\n  removeFavorite,\n  removeWatchLater,\n  addWatchLater\n};\n\nconst mapStateToProps = ({ favorites, watchLater }: IStateTree) => ({ favorites, watchLater });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieGridContainer);","import { IMovie } from \"../../movieSearch/models\";\nimport { ADD_FAVORITE } from \"../types\";\nimport { IAddFavoriteAction } from \"../models\";\n\nexport default (movie: IMovie): IAddFavoriteAction => ({\n  type: ADD_FAVORITE,\n  payload: movie\n})","export const ADD_FAVORITE = 'FAVORITE/ADD';\nexport const REMOVE_FAVORITE = 'FAVORITE/REMOVE';","import { IMovie } from \"../../movieSearch/models\";\nimport { REMOVE_FAVORITE } from \"../types\";\nimport { IRemoveFavoriteAction } from \"../models\";\n\nexport default (movie: IMovie): IRemoveFavoriteAction => ({\n  type: REMOVE_FAVORITE,\n  payload: movie\n})","import { IMovie } from \"../../movieSearch/models\";\nimport { REMOVE_WATCH_LATER } from \"../types\";\nimport { IWatchLaterRemoveAction } from \"../models\";\n\nexport default (movie: IMovie): IWatchLaterRemoveAction => ({\n  type: REMOVE_WATCH_LATER,\n  payload: movie\n})","export const ADD_WATCH_LATER = 'WATCH_LATER/ADD';\nexport const REMOVE_WATCH_LATER = 'WATCH_LATER/REMOVE';","import { IMovie } from \"../../movieSearch/models\";\nimport { ADD_WATCH_LATER } from \"../types\";\nimport { IWatchLaterAddAction } from \"../models\";\n\nexport default (movie: IMovie): IWatchLaterAddAction => ({\n  type: ADD_WATCH_LATER,\n  payload: movie\n})","import React from 'react';\nimport MovieGridContainer from '../MovieGrid';\nimport { IProps } from './interfaces';\n\nconst MovieSearchResultsContainer = ({ movieSearchState }: IProps) => {\n  const { isFetching, isFetched, data, error } = movieSearchState;\n  if (isFetching || !isFetched || !data) {\n    return null;\n  }\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  const { results: movies } = data;\n  return <MovieGridContainer movies={movies} />\n}\n\nexport default MovieSearchResultsContainer;","import { connect } from 'react-redux';\nimport MovieSearchResultsContainer from './MovieSearchResultsContainer';\nimport { IStateTree } from '../../store/interfaces';\n\nconst mapStateToProps = ({ movieSearch }: IStateTree) => ({ movieSearchState: movieSearch })\n\nexport default connect(mapStateToProps)(MovieSearchResultsContainer);","import React from 'react';\nimport { IProps } from './interfaces';\nimport MovieGridContainer from '../MovieGrid';\nimport { IMovie } from '../../store/movieSearch/models';\n\nconst FavoriteMoviesContainer = ({ favorites }: IProps) => {\n  const favoriteMovies = Object.values(favorites) as IMovie[];\n  return <MovieGridContainer movies={favoriteMovies} />\n}\n\nexport default FavoriteMoviesContainer;","import { connect } from 'react-redux';\nimport FavoriteMoviesContainer from './FavoriteMoviesContainer';\nimport { IStateTree } from '../../store/interfaces';\n\nconst mapStateToProps = ({ favorites }: IStateTree) => ({ favorites })\n\nexport default connect(mapStateToProps)(FavoriteMoviesContainer);","import React from 'react';\nimport { IProps } from './interfaces';\nimport MovieGridContainer from '../MovieGrid';\nimport { IMovie } from '../../store/movieSearch/models';\n\nconst FavoriteMoviesContainer = ({ watchLater }: IProps) => {\n  const favoriteMovies = Object.values(watchLater) as IMovie[];\n  return <MovieGridContainer movies={favoriteMovies} />\n}\n\nexport default FavoriteMoviesContainer;","import { connect } from 'react-redux';\nimport WatchLaterMoviesContainer from './WatchLaterMoviesContainer';\nimport { IStateTree } from '../../store/interfaces';\n\nconst mapStateToProps = ({ watchLater }: IStateTree) => ({ watchLater })\n\nexport default connect(mapStateToProps)(WatchLaterMoviesContainer);","import React, { useState, useCallback } from 'react';\nimport debounce from 'lodash.debounce';\nimport { SearchBar, Pagination } from '../../../components';\nimport { MovieSearchResultsContainer } from '../../../containers';\nimport { IProps } from './interfaces';\nimport './styles.css';\n\nconst SearchPage = ({ movieSearchState, searchMovies }: IProps) => {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const getMovies = useCallback((query: string, page: number) => {\n    searchMovies(query, page);\n  }, [searchMovies])\n\n  const handleSearchTermChange = useCallback(debounce((text: string) => {\n    setSearchTerm(text);\n    getMovies(text, 1);\n  }, 700), [setSearchTerm, getMovies])\n\n  const handlePageChange = useCallback((newPage: number) => {\n    getMovies(searchTerm, newPage);\n  }, [searchTerm, getMovies])\n\n  const { data: results } = movieSearchState;\n\n  return (\n    <div className='search-page'>\n      <div className='search-page__search-bar-container'>\n        <SearchBar onChange={handleSearchTermChange} />\n      </div>\n      <div className='search-page__search-results-container'>\n        <MovieSearchResultsContainer />\n      </div>\n      {\n        results && results.total_pages > 0 && (\n          <Pagination\n            totalPages={results.total_pages}\n            page={results.page}\n            onNextClick={() => handlePageChange(results.page + 1)}\n            onPreviousClick={() => handlePageChange(results.page - 1)}\n          />\n        )\n      }\n    </div>\n  )\n};\n\nexport default SearchPage;","import { tmdbAPIKey, tmdbAPIURL } from '../../config';\nimport { stringify } from 'querystring';\nimport { IMovieSearchResponse } from '../../store/movieSearch/models';\n\nexport const searchMovies = async (query: string, page: number = 1, apiURL: string = tmdbAPIURL, apiKey: string = tmdbAPIKey): Promise<IMovieSearchResponse> => {\n  const response = await fetch(`${apiURL}/search/movie?${stringify({ query, api_key: apiKey, page })}`)\n  const json: IMovieSearchResponse = await response.json();\n  return json;\n}","import { connect } from 'react-redux';\nimport SearchPage from './SearchPage';\nimport { searchMovies } from '../../../store/movieSearch/actions';\nimport { IStateTree } from '../../../store/interfaces';\n\nconst mapStateToProps = ({ movieSearch }: IStateTree) => ({ movieSearchState: movieSearch })\nconst mapDispatchToProps = {\n  searchMovies\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);","import { Dispatch } from 'redux';\nimport { searchMovies } from '../../../services';\nimport { MOVIE_SEARCH_START, MOVIE_SEARCH_SUCCESS, MOVIE_SEARCH_FAILURE, MOVIE_SEARCH_RESET } from '../types';\nimport { IMovieSearchStartAction, IMovieSearchFailureAction, IMovieSearchSuccessAction, IMovieSearchResetAction } from '../models/IMovieSearchActions';\nimport { IMovieSearchResponse } from '../models';\n\nconst movieSearchStart = (): IMovieSearchStartAction => ({ type: MOVIE_SEARCH_START });\nconst movieSearchFailure = (errorMsg: string): IMovieSearchFailureAction => ({ type: MOVIE_SEARCH_FAILURE, payload: errorMsg });\nconst movieSearchSuccess = (data: IMovieSearchResponse): IMovieSearchSuccessAction => ({ type: MOVIE_SEARCH_SUCCESS, payload: data });\nconst movieSearchReset = (): IMovieSearchResetAction => ({ type: MOVIE_SEARCH_RESET });\n\nexport default (query: string, page: number) => async (dispatch: Dispatch) => {\n  dispatch(movieSearchStart());\n\n  if (!query) {\n    return dispatch(movieSearchReset())\n  }\n\n  try {\n    const response = await searchMovies(query, page);\n    dispatch(movieSearchSuccess(response));\n  } catch (error) {\n    const { message } = error as Error;\n    dispatch(movieSearchFailure(message));\n  }\n}","export const MOVIE_SEARCH_START = 'MOVIE_SEARCH/START';\nexport const MOVIE_SEARCH_FAILURE = 'MOVIE_SEARCH/FAILED';\nexport const MOVIE_SEARCH_SUCCESS = 'MOVIE_SEARCH/SUCCESS'\nexport const MOVIE_SEARCH_RESET = 'MOVIE_SEARCH/RESET'","import React from 'react';\nimport { FavoriteMoviesContainer } from '../../../containers';\n\nconst FavoritesPage = () => <FavoriteMoviesContainer />\n\nexport default FavoritesPage;","import React from 'react';\nimport { WatchLaterMoviesContainer } from '../../../containers';\n\nconst WatchLaterPage = () => <WatchLaterMoviesContainer />\n\nexport default WatchLaterPage;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport { MainLayout } from './views/layouts';\nimport { SearchPage, FavoritesPage, WatchLaterPage } from './views/pages';\n\nfunction App() {\n  return (\n    <Router basename='https://essamtarik.github.io/my-cinema'>\n      <MainLayout>\n        <Route exact path='/' component={SearchPage} />\n        <Route exact path='/favorites' component={FavoritesPage} />\n        <Route exact path='/watch-later' component={WatchLaterPage} />\n      </MainLayout>\n    </Router>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { MOVIE_SEARCH_START, MOVIE_SEARCH_FAILURE, MOVIE_SEARCH_SUCCESS, MOVIE_SEARCH_RESET } from '../types';\nimport { IMoviesFetchState, MovieSearchAction } from '../models';\n\n\nexport const initialState: IMoviesFetchState = {\n  isFetched: false,\n  isFetching: false,\n}\n\nexport default (state: IMoviesFetchState = initialState, action: MovieSearchAction): IMoviesFetchState => {\n  switch (action.type) {\n    case MOVIE_SEARCH_START:\n      return { ...initialState, isFetching: true };\n    case MOVIE_SEARCH_FAILURE:\n      return { ...initialState, isFetched: false, isFetching: false, error: action.payload };\n    case MOVIE_SEARCH_SUCCESS:\n      return { ...initialState, isFetched: true, isFetching: false, data: action.payload };\n    case MOVIE_SEARCH_RESET:\n      return initialState;\n    default:\n      return state;\n  }\n}","import { IFavorites, FavoriteAction } from \"../models\"\nimport { ADD_FAVORITE, REMOVE_FAVORITE } from \"../types\"\n\nexport const initialState: IFavorites = {}\n\nexport default (state: IFavorites = initialState, action: FavoriteAction) => {\n  switch (action.type) {\n    case ADD_FAVORITE: {\n      const { id } = action.payload;\n      return { ...state, [id]: action.payload };\n    }\n    case REMOVE_FAVORITE: {\n      const { id } = action.payload;\n      delete state[id];\n      return { ...state };\n    }\n    default:\n      return state;\n  }\n}","import { IWatchLater, WatchLaterActions } from \"../models\"\nimport { ADD_WATCH_LATER, REMOVE_WATCH_LATER } from \"../types\";\n\nexport const initialState: IWatchLater = {};\n\nexport default (state: IWatchLater = initialState, action: WatchLaterActions) => {\n  switch (action.type) {\n    case ADD_WATCH_LATER: {\n      const { id } = action.payload;\n      return { ...state, [id]: action.payload };\n    }\n    case REMOVE_WATCH_LATER: {\n      const { id } = action.payload;\n      delete state[id];\n      return { ...state };\n    }\n    default:\n      return state;\n  }\n}","import { IStateTree } from './interfaces';\nimport { Reducer, AnyAction, combineReducers } from 'redux';\nimport { movieSearchReducer } from './movieSearch/reducers';\nimport { favoritesReducer } from './favorites/reducers';\nimport { watchLaterReducer } from './watchLater/reducers';\n\ntype IRootReducer = Reducer<IStateTree, AnyAction>;\nconst rootReducer: IRootReducer = combineReducers({\n  movieSearch: movieSearchReducer,\n  favorites: favoritesReducer,\n  watchLater: watchLaterReducer\n})\n\nexport default rootReducer;","import { applyMiddleware, createStore, Middleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"./rootReducer\";\n\nconst persistConfig = {\n  key: \"my-cinema\",\n  whitelist: ['favorites', 'watchLater'],\n  storage,\n};\n\nconst middleware: Middleware[] = [thunk];\n\nexport const persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = createStore(persistedReducer, composeWithDevTools(applyMiddleware(...middleware)));\nexport const persistor = persistStore(store);\n","import en from './en';\n\nexport default {\n  en\n}","import searchBar from './searchBar';\nimport navBar from './navBar';\nimport movie from './movie';\nimport pagination from './pagination';\n\nexport default {\n  ...searchBar,\n  ...navBar,\n  ...movie,\n  ...pagination\n}","export default {\n  'searchBar.placeholder': 'Type the name of a movie'\n}","export default {\n  'navBar.search': 'search',\n  'navBar.watchLater': 'watch later',\n  'navBar.favorites': 'favorites',\n  'navBar.title': 'My Cinema'\n}","export default {\n  'movie.posterMissing': 'No preview available',\n  'movie.noResults': 'No movies here'\n}","export default {\n  'pagination.next': 'next',\n  'pagination.previous': 'previous',\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { IntlProvider } from 'react-intl';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store, persistor } from './store';\nimport locale from './locale';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <IntlProvider locale='en' messages={locale.en}>\n          <App />\n        </IntlProvider>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}