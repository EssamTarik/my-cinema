{"version":3,"sources":["components/SearchBar/SearchBar.tsx","components/NavigationBar/NavigationBar.tsx","containers/MovieGrid/MovieGridContainer.tsx","containers/MovieGrid/index.ts","store/favorites/actions/addFavorite.ts","store/favorites/types/index.ts","store/favorites/actions/removeFavorite.ts","store/watchLater/actions/removeWatchLater.ts","store/watchLater/types/index.ts","store/watchLater/actions/addWatchLater.ts","containers/MovieSearchResults/MovieSearchResultsContainer.tsx","containers/MovieSearchResults/index.ts","containers/FavoriteMovies/FavoriteMoviesContainer.tsx","containers/FavoriteMovies/index.ts","containers/WatchLaterMovies/WatchLaterMoviesContainer.tsx","containers/WatchLaterMovies/index.ts","config/tmdb.ts","services/tmdb/tmdb.ts","containers/MovieTrailerModal/MovieTrailerModal.tsx","containers/MovieTrailerModal/index.ts","store/movieTrailer/actions/getMovieTrailer.ts","store/movieTrailer/types/index.ts","store/movieTrailer/actions/resetMovieTrailer.ts","components/MovieCard/MovieCard.tsx","util/tmdb.ts","components/MovieGrid/MovieGrid.tsx","components/Pagination/Pagination.tsx","components/Modal/Modal.tsx","components/MovieTrailer/MovieTrailer.tsx","views/layouts/MainLayout/MainLayout.tsx","views/pages/Search/SearchPage.tsx","store/movieSearch/actions/resetMovieSearch.ts","store/movieSearch/types/index.ts","views/pages/Search/index.ts","store/movieSearch/actions/searchMovies.ts","views/pages/Favorites/FavoritesPage.tsx","views/pages/WatchLater/WatchLaterPage.tsx","App.tsx","serviceWorker.ts","store/movieSearch/reducers/movieSearch.ts","store/favorites/reducers/favoritesReducer.ts","store/watchLater/reducers/watchLaterReducer.ts","store/movieTrailer/reducers/movieTrailerReducer.ts","store/rootReducer.ts","store/index.ts","locale/index.ts","locale/en/index.ts","locale/en/searchBar.ts","locale/en/navBar.ts","locale/en/movie.ts","locale/en/pagination.ts","locale/en/movieTrailer.ts","index.tsx"],"names":["SearchBar","onChange","intl","useIntl","Form","Control","placeholder","formatMessage","id","type","value","target","NavigationBar","useState","mobileMenuOpen","setMobileMenuOpen","toggleMobileMenu","useCallback","className","to","onClick","cn","color","size","MovieGridContainer","movies","favorites","watchLater","addFavorite","removeFavorite","addWatchLater","removeWatchLater","onAddToFavorites","onRemoveFromFavorites","onAddToWatchLater","onRemoveFromWatchLater","mapDispatchToProps","movie","payload","connect","MovieSearchResultsContainer","movieSearchState","isFetching","isFetched","data","error","results","movieSearch","FavoriteMoviesContainer","favoriteMovies","Object","values","WatchLaterMoviesContainer","process","REACT_APP_TMDB_API_KEY","tmdbAPIKey","REACT_APP_TMDB_API_URL","tmdbAPIURL","REACT_APP_TMDB_IMAGE_BASE_URL","tmdbImageBaseUrl","getJSON","endpoint","apiURL","a","fetch","response","json","searchMovies","query","page","apiKey","stringify","api_key","getMovieTrailers","movieId","MovieTrailerModalContainer","resetMovieTrailer","onRequestClose","trailerState","trailer","getMovieTrailer","useEffect","noVideos","dispatch","youtube","message","MovieTrailerModal","MovieCard","imageRelativeURL","imageWidth","favorite","trailerModalOpen","setModalTrailerOpen","posterPath","poster_path","originalTitle","original_title","fill","src","alt","MovieGrid","length","map","isFavorite","undefined","isWatchLater","key","Pagination","totalPages","onNextClick","onPreviousClick","isLastPage","isFirstPage","disabled","Modal","children","event","stopPropagation","MovieTrailer","source","opts","width","videoId","MainLayout","SearchPage","resetMovieSearch","searchTerm","setSearchTerm","getMovies","handleSearchTermChange","debounce","text","handlePageChange","newPage","MovieSearchResults","total_pages","FavoritesPage","FavoriteMovies","WatchLaterPage","WatchLaterMovies","App","basename","exact","path","component","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","state","action","persistConfig","whitelist","storage","middleware","thunk","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","en","ReactDOM","render","StrictMode","loading","locale","messages","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.96b57a15.chunk.js","sourcesContent":["import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Form from 'react-bootstrap/Form';\nimport { IProps } from './interfaces';\n\nconst SearchBar = ({ onChange }: IProps) => {\n  const intl = useIntl();\n  return (\n    <Form.Control\n      placeholder={intl.formatMessage({ id: 'searchBar.placeholder' })}\n      type=\"text\"\n      onChange={({ target: { value } }) => onChange(value)} />\n  );\n}\n\nexport default SearchBar;","import React, { useState, useCallback } from 'react';\nimport cn from 'classnames';\nimport { GiHamburgerMenu } from 'react-icons/gi';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\nimport { FormattedMessage } from 'react-intl';\n\nconst NavigationBar = () => {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const toggleMobileMenu = useCallback(() => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  }, [mobileMenuOpen, setMobileMenuOpen])\n\n  return (\n    <div className='navigation-bar' >\n      <Link className='navigation-bar__title' to='/'><FormattedMessage id='navBar.title' /></Link>\n      <div onClick={toggleMobileMenu} className={cn('navigation-bar__menu', { 'navigation-bar__menu--mobile-open': mobileMenuOpen })}>\n        <Link className='navigation-bar__menu__item' to='/'><FormattedMessage id='navBar.search' /></Link>\n        <Link className='navigation-bar__menu__item' to='favorites'><FormattedMessage id='navBar.favorites' /></Link>\n        <Link className='navigation-bar__menu__item' to='watch-later'><FormattedMessage id='navBar.watchLater' /></Link>\n        <button className='navigation-bar__menu-close-btn'><AiOutlineClose color='white' /></button>\n      </div>\n      <button onClick={toggleMobileMenu} className='navigation-bar__menu-btn'><GiHamburgerMenu size={20} color='white' /></button>\n    </div >\n  );\n}\n\nexport default NavigationBar;","import React from 'react';\nimport { IProps } from './interfaces';\nimport { MovieGrid } from '../../components';\n\nconst MovieGridContainer = ({ movies, favorites, watchLater, addFavorite, removeFavorite, addWatchLater, removeWatchLater }: IProps) => (\n  <MovieGrid\n    movies={movies}\n    favorites={favorites}\n    watchLater={watchLater}\n    onAddToFavorites={addFavorite}\n    onRemoveFromFavorites={removeFavorite}\n    onAddToWatchLater={addWatchLater}\n    onRemoveFromWatchLater={removeWatchLater}\n  />\n);\n\nexport default MovieGridContainer;","import { connect } from 'react-redux';\nimport { addFavorite, removeFavorite } from '../../store/favorites/actions';\nimport { addWatchLater, removeWatchLater } from '../../store/watchLater/actions';\nimport MovieGridContainer from './MovieGridContainer';\nimport { IStateTree } from '../../store/interfaces';\n\nconst mapDispatchToProps = {\n  addFavorite,\n  removeFavorite,\n  removeWatchLater,\n  addWatchLater\n};\n\nconst mapStateToProps = ({ favorites, watchLater }: IStateTree) => ({ favorites, watchLater });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieGridContainer);","import { IMovie } from \"../../movieSearch/models\";\nimport { ADD_FAVORITE } from \"../types\";\nimport { IAddFavoriteAction } from \"../models\";\n\nexport default (movie: IMovie): IAddFavoriteAction => ({\n  type: ADD_FAVORITE,\n  payload: movie\n})","export const ADD_FAVORITE = 'FAVORITE/ADD';\nexport const REMOVE_FAVORITE = 'FAVORITE/REMOVE';","import { IMovie } from \"../../movieSearch/models\";\nimport { REMOVE_FAVORITE } from \"../types\";\nimport { IRemoveFavoriteAction } from \"../models\";\n\nexport default (movie: IMovie): IRemoveFavoriteAction => ({\n  type: REMOVE_FAVORITE,\n  payload: movie\n})","import { IMovie } from \"../../movieSearch/models\";\nimport { REMOVE_WATCH_LATER } from \"../types\";\nimport { IWatchLaterRemoveAction } from \"../models\";\n\nexport default (movie: IMovie): IWatchLaterRemoveAction => ({\n  type: REMOVE_WATCH_LATER,\n  payload: movie\n})","export const ADD_WATCH_LATER = 'WATCH_LATER/ADD';\nexport const REMOVE_WATCH_LATER = 'WATCH_LATER/REMOVE';","import { IMovie } from \"../../movieSearch/models\";\nimport { ADD_WATCH_LATER } from \"../types\";\nimport { IWatchLaterAddAction } from \"../models\";\n\nexport default (movie: IMovie): IWatchLaterAddAction => ({\n  type: ADD_WATCH_LATER,\n  payload: movie\n})","import React from 'react';\nimport MovieGridContainer from '../MovieGrid';\nimport { IProps } from './interfaces';\n\nconst MovieSearchResultsContainer = ({ movieSearchState }: IProps) => {\n  const { isFetching, isFetched, data, error } = movieSearchState;\n  if (isFetching || !isFetched || !data) {\n    return null;\n  }\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  const { results: movies } = data;\n  return <MovieGridContainer movies={movies} />\n}\n\nexport default MovieSearchResultsContainer;","import { connect } from 'react-redux';\nimport MovieSearchResultsContainer from './MovieSearchResultsContainer';\nimport { IStateTree } from '../../store/interfaces';\n\nconst mapStateToProps = ({ movieSearch }: IStateTree) => ({ movieSearchState: movieSearch })\n\nexport default connect(mapStateToProps)(MovieSearchResultsContainer);","import React from 'react';\nimport { IProps } from './interfaces';\nimport MovieGridContainer from '../MovieGrid';\nimport { IMovie } from '../../store/movieSearch/models';\n\nconst FavoriteMoviesContainer = ({ favorites }: IProps) => {\n  const favoriteMovies = Object.values(favorites) as IMovie[];\n  return <MovieGridContainer movies={favoriteMovies} />\n}\n\nexport default FavoriteMoviesContainer;","import { connect } from 'react-redux';\nimport FavoriteMoviesContainer from './FavoriteMoviesContainer';\nimport { IStateTree } from '../../store/interfaces';\n\nconst mapStateToProps = ({ favorites }: IStateTree) => ({ favorites })\n\nexport default connect(mapStateToProps)(FavoriteMoviesContainer);","import React from 'react';\nimport { IProps } from './interfaces';\nimport MovieGridContainer from '../MovieGrid';\nimport { IMovie } from '../../store/movieSearch/models';\n\nconst FavoriteMoviesContainer = ({ watchLater }: IProps) => {\n  const favoriteMovies = Object.values(watchLater) as IMovie[];\n  return <MovieGridContainer movies={favoriteMovies} />\n}\n\nexport default FavoriteMoviesContainer;","import { connect } from 'react-redux';\nimport WatchLaterMoviesContainer from './WatchLaterMoviesContainer';\nimport { IStateTree } from '../../store/interfaces';\n\nconst mapStateToProps = ({ watchLater }: IStateTree) => ({ watchLater })\n\nexport default connect(mapStateToProps)(WatchLaterMoviesContainer);","const { REACT_APP_TMDB_API_KEY: tmdbAPIKey = '', REACT_APP_TMDB_API_URL: tmdbAPIURL = '', REACT_APP_TMDB_IMAGE_BASE_URL: tmdbImageBaseUrl = '' } = process.env;\n\nexport { tmdbAPIKey, tmdbAPIURL, tmdbImageBaseUrl };","import { tmdbAPIKey, tmdbAPIURL } from '../../config';\nimport { stringify } from 'querystring';\nimport { IMovieSearchResponse } from '../../store/movieSearch/models';\nimport { IMovieTrailerResponse } from '../../store/movieTrailer/models';\n\nconst getJSON = async <T>(endpoint: string, apiURL: string) => {\n  const response = await fetch(`${apiURL}/${endpoint}`)\n  const json: T = await response.json();\n  return json;\n}\n\nexport const searchMovies = async (query: string, page: number = 1, apiURL: string = tmdbAPIURL, apiKey: string = tmdbAPIKey): Promise<IMovieSearchResponse> => {\n  const endpoint = `search/movie?${stringify({ query, api_key: apiKey, page })}`;\n  const json: IMovieSearchResponse = await getJSON<IMovieSearchResponse>(endpoint, apiURL);\n  return json;\n}\n\nexport const getMovieTrailers = async (movieId: number, apiURL: string = tmdbAPIURL, apiKey: string = tmdbAPIKey): Promise<IMovieTrailerResponse> => {\n  const endpoint = `movie/${movieId}/trailers?${stringify({ api_key: apiKey })}`;\n  const json: IMovieTrailerResponse = await getJSON<IMovieTrailerResponse>(endpoint, apiURL);\n  return json;\n}","import React, { useEffect } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Modal, MovieTrailer } from '../../components';\nimport { IProps } from './interfaces';\nimport './styles.css';\n\nconst MovieTrailerModalContainer = ({ resetMovieTrailer, onRequestClose, movie: { id: movieId }, trailerState: { data: trailer, error, isFetched }, getMovieTrailer }: IProps) => {\n  useEffect(() => {\n    getMovieTrailer(movieId)\n  }, [movieId, getMovieTrailer]);\n\n  useEffect(() => {\n    return () => {\n      resetMovieTrailer()\n    }\n  }, [resetMovieTrailer])\n\n  const noVideos = isFetched && !trailer;\n  return (\n    <Modal onRequestClose={onRequestClose}>\n      {(noVideos || error) && <div className='movie-trailer-modal__not-found'><FormattedMessage id='movieTrailer.notFound' /></div>}\n      {trailer && <MovieTrailer trailer={trailer} />}\n    </Modal>\n  )\n}\n\nexport default MovieTrailerModalContainer;","import { connect } from 'react-redux';\nimport { getMovieTrailer, resetMovieTrailer } from '../../store/movieTrailer/actions';\nimport { IStateTree } from '../../store/interfaces';\nimport MovieTrailerModal from './MovieTrailerModal';\n\nconst mapStateToProps = ({ trailer }: IStateTree) => ({ trailerState: trailer })\nconst mapDispatchToProps = {\n  getMovieTrailer,\n  resetMovieTrailer\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieTrailerModal)","import { Dispatch } from 'redux';\nimport { getMovieTrailers } from '../../../services';\nimport { IMovieTrailerFetchStartAction, IMovieTrailerFetchFailureAction, IMovieTrailer, IMovieTrailerFetchSuccessAction } from '../models';\nimport { MOVIE_TRAILER_FETCH_START, MOVIE_TRAILER_FETCH_FAILURE, MOVIE_TRAILER_FETCH_SUCCESS } from '../types';\n\nconst getMovieTrailerStart = (): IMovieTrailerFetchStartAction => ({\n  type: MOVIE_TRAILER_FETCH_START\n})\nconst getMovieTrailerFailure = (error: string): IMovieTrailerFetchFailureAction => ({\n  type: MOVIE_TRAILER_FETCH_FAILURE,\n  payload: error\n})\nconst getMovieTrailerSuccess = (data: IMovieTrailer): IMovieTrailerFetchSuccessAction => ({\n  type: MOVIE_TRAILER_FETCH_SUCCESS,\n  payload: data\n})\n\nexport default (movieId: number) => async (dispatch: Dispatch) => {\n  dispatch(getMovieTrailerStart());\n\n  try {\n    const response = await getMovieTrailers(movieId);\n    const { youtube } = response;\n    const trailer = youtube[0];\n    dispatch(getMovieTrailerSuccess(trailer));\n  } catch (e) {\n    const { message } = e as Error;\n    dispatch(getMovieTrailerFailure(message));\n  }\n}","export const MOVIE_TRAILER_FETCH_START = 'MOVIE_TRAILER_FETCH/START';\nexport const MOVIE_TRAILER_FETCH_FAILURE = 'MOVIE_TRAILER_FETCH/FAILED';\nexport const MOVIE_TRAILER_FETCH_SUCCESS = 'MOVIE_TRAILER_FETCH/SUCCESS'\nexport const MOVIE_TRAILER_FETCH_RESET = 'MOVIE_TRAILER_FETCH/RESET'","import { MOVIE_TRAILER_FETCH_RESET } from \"../types\";\nimport { IMovieTrailerResetAction } from \"../models\";\n\nexport default (): IMovieTrailerResetAction => ({\n  type: MOVIE_TRAILER_FETCH_RESET\n})\n","import React, { useState } from 'react';\nimport { AiOutlineStar, AiFillStar } from 'react-icons/ai';\nimport { MdWatchLater } from 'react-icons/md';\nimport { FormattedMessage } from 'react-intl';\nimport { MovieTrailerModalContainer } from '../../containers';\nimport { getTMDBImageURL } from '../../util';\nimport { IProps } from './interfaces';\nimport './styles.css';\n\nconst moviePosterWidth = 185;\nconst watchLaterFillColor = 'grey';\nconst watchLaterActiveFillColor = 'orange';\nconst starFillColor = 'lightgrey';\nconst starActiveFillColor = 'yellow';\n\n\nconst MovieCard = ({ movie, favorite = false, watchLater = false, onAddToFavorites, onAddToWatchLater, onRemoveFromFavorites, onRemoveFromWatchLater }: IProps) => {\n  const [trailerModalOpen, setModalTrailerOpen] = useState(false);\n  const { poster_path: posterPath, original_title: originalTitle } = movie;\n\n  return (\n    <>\n      <div className='movie-card'>\n        <button onClick={favorite ? onRemoveFromFavorites : onAddToFavorites} className='movie-card__action-btn movie-card__fav-btn'>\n          {favorite ? <AiFillStar fill={starActiveFillColor} /> : <AiOutlineStar fill={starFillColor} />}\n        </button>\n\n        <button onClick={watchLater ? onRemoveFromWatchLater : onAddToWatchLater} className='movie-card__action-btn movie-card__watch-later-btn'>\n          {watchLater ? <MdWatchLater fill={watchLaterActiveFillColor} /> : <MdWatchLater fill={watchLaterFillColor} />}\n        </button>\n        <div onClick={() => setModalTrailerOpen(true)} className='movie-card__content'>\n          {\n            posterPath ?\n              <img className='movie-card__poster' src={getTMDBImageURL(posterPath, moviePosterWidth)} alt={originalTitle} />\n              : <div className='movie-card__poster-missing'><FormattedMessage id='movie.posterMissing' /></div>\n          }\n        </div>\n        <div className='movie-card__title'>{originalTitle}</div>\n\n      </div>\n      {trailerModalOpen && <MovieTrailerModalContainer movie={movie} onRequestClose={() => setModalTrailerOpen(false)} />}\n    </>\n  )\n}\n\nexport default MovieCard;","import { tmdbImageBaseUrl } from '../config';\n\nexport const getTMDBImageURL = (imageRelativeURL: string, imageWidth: number) => {\n  return `${tmdbImageBaseUrl}/w${imageWidth}${imageRelativeURL}`;\n}","import React from 'react';\nimport MovieCard from '../MovieCard';\nimport { IProps } from './interfaces';\nimport './styles.css';\nimport { FormattedMessage } from 'react-intl';\n\nconst MovieGrid = ({ movies, favorites, watchLater, onAddToFavorites, onRemoveFromFavorites, onAddToWatchLater, onRemoveFromWatchLater }: IProps) => {\n  if (movies.length === 0) {\n    return <div className='movie-grid__no-results'><FormattedMessage id='movie.noResults' /></div>\n  }\n  return (\n    <div className='movie-grid'>\n      {\n        movies.map(movie => {\n          const isFavorite = favorites[movie.id] !== undefined;\n          const isWatchLater = watchLater[movie.id] !== undefined;\n          return (\n            <MovieCard\n              key={movie.id}\n              movie={movie}\n              favorite={isFavorite}\n              watchLater={isWatchLater}\n              onAddToFavorites={() => onAddToFavorites(movie)}\n              onAddToWatchLater={() => onAddToWatchLater(movie)}\n              onRemoveFromFavorites={() => onRemoveFromFavorites(movie)}\n              onRemoveFromWatchLater={() => onRemoveFromWatchLater(movie)}\n            />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default MovieGrid;","import React from 'react';\nimport cn from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { IProps } from './interfaces';\nimport './styles.css';\n\nconst Pagination = ({ page, totalPages, onNextClick, onPreviousClick }: IProps) => {\n  const isLastPage = page === totalPages;\n  const isFirstPage = page === 1;\n\n  return (\n    <div className='pagination'>\n      <div className='pagination__prev-container'>\n        <button onClick={onPreviousClick} disabled={isFirstPage} className={cn('pagination__btn')}><FormattedMessage id='pagination.previous' /></button>\n      </div>\n      <div className='pagination__next-container'>\n        <button onClick={onNextClick} disabled={isLastPage} className={cn('pagination__btn')}><FormattedMessage id='pagination.next' /></button>\n      </div>\n    </div>\n  )\n}\n\nexport default Pagination;","import React from 'react';\nimport { IProps } from './interfaces';\nimport './styles.css';\n\nconst Modal = ({ onRequestClose, children }: IProps) => (\n  <div onClick={onRequestClose} className='full-screen-modal'>\n    <div onClick={event => event.stopPropagation()} className='modal__content'>\n      {children}\n    </div>\n  </div>\n);\n\nexport default Modal;","import React from 'react';\nimport Youtube from 'react-youtube'\nimport { IProps } from './interfaces';\nimport './styles.css';\n\nconst MovieTrailer = ({ trailer }: IProps) => {\n  const { source } = trailer;\n  return (\n    <div className='movie-trailer'>\n      <Youtube opts={{ width: '100%' }} videoId={source} />\n    </div>\n  )\n}\n\nexport default MovieTrailer;","import React from 'react';\nimport { NavigationBar } from '../../../components';\nimport './styles.css';\n\nconst MainLayout = ({ children }: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>) => (\n  <div className='main-layout'>\n    <NavigationBar />\n    <div className='main-layout__content'>\n      {children}\n    </div>\n  </div>\n)\n\nexport default MainLayout;","import React, { useState, useCallback, useEffect } from 'react';\nimport debounce from 'lodash.debounce';\nimport { SearchBar, Pagination } from '../../../components';\nimport { MovieSearchResultsContainer } from '../../../containers';\nimport { IProps } from './interfaces';\nimport './styles.css';\n\nconst SearchPage = ({ resetMovieSearch, movieSearchState, searchMovies }: IProps) => {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    return () => {\n      resetMovieSearch();\n    }\n  }, [resetMovieSearch])\n\n  const getMovies = useCallback((query: string, page: number) => {\n    searchMovies(query, page);\n  }, [searchMovies])\n\n  const handleSearchTermChange = useCallback(debounce((text: string) => {\n    setSearchTerm(text);\n    getMovies(text, 1);\n  }, 500), [setSearchTerm, getMovies])\n\n  const handlePageChange = useCallback((newPage: number) => {\n    getMovies(searchTerm, newPage);\n  }, [searchTerm, getMovies])\n\n  const { data: results } = movieSearchState;\n\n  return (\n    <div className='search-page'>\n      <div className='search-page__search-bar-container'>\n        <SearchBar onChange={handleSearchTermChange} />\n      </div>\n      <div className='search-page__search-results-container'>\n        <MovieSearchResultsContainer />\n      </div>\n      {\n        results && results.total_pages > 0 && (\n          <Pagination\n            totalPages={results.total_pages}\n            page={results.page}\n            onNextClick={() => handlePageChange(results.page + 1)}\n            onPreviousClick={() => handlePageChange(results.page - 1)}\n          />\n        )\n      }\n    </div>\n  )\n};\n\nexport default SearchPage;","import { IMovieSearchResetAction } from \"../models\";\nimport { MOVIE_SEARCH_RESET } from \"../types\";\n\nexport default (): IMovieSearchResetAction => ({ type: MOVIE_SEARCH_RESET });\n","export const MOVIE_SEARCH_START = 'MOVIE_SEARCH/START';\nexport const MOVIE_SEARCH_FAILURE = 'MOVIE_SEARCH/FAILED';\nexport const MOVIE_SEARCH_SUCCESS = 'MOVIE_SEARCH/SUCCESS'\nexport const MOVIE_SEARCH_RESET = 'MOVIE_SEARCH/RESET'","import { connect } from 'react-redux';\nimport SearchPage from './SearchPage';\nimport { searchMovies, resetMovieSearch } from '../../../store/movieSearch/actions';\nimport { IStateTree } from '../../../store/interfaces';\n\nconst mapStateToProps = ({ movieSearch }: IStateTree) => ({ movieSearchState: movieSearch })\nconst mapDispatchToProps = {\n  searchMovies,\n  resetMovieSearch\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);","import { Dispatch } from 'redux';\nimport { searchMovies } from '../../../services';\nimport { MOVIE_SEARCH_START, MOVIE_SEARCH_SUCCESS, MOVIE_SEARCH_FAILURE } from '../types';\nimport { IMovieSearchStartAction, IMovieSearchFailureAction, IMovieSearchSuccessAction } from '../models/IMovieSearchActions';\nimport resetMovieSearch from './resetMovieSearch';\nimport { IMovieSearchResponse } from '../models';\n\nconst movieSearchStart = (): IMovieSearchStartAction => ({ type: MOVIE_SEARCH_START });\nconst movieSearchFailure = (errorMsg: string): IMovieSearchFailureAction => ({ type: MOVIE_SEARCH_FAILURE, payload: errorMsg });\nconst movieSearchSuccess = (data: IMovieSearchResponse): IMovieSearchSuccessAction => ({ type: MOVIE_SEARCH_SUCCESS, payload: data });\n\nexport default (query: string, page: number) => async (dispatch: Dispatch) => {\n  dispatch(movieSearchStart());\n\n  if (!query) {\n    return dispatch(resetMovieSearch())\n  }\n\n  try {\n    const response = await searchMovies(query, page);\n    dispatch(movieSearchSuccess(response));\n  } catch (error) {\n    const { message } = error as Error;\n    dispatch(movieSearchFailure(message));\n  }\n}","import React from 'react';\nimport { FavoriteMoviesContainer } from '../../../containers';\n\nconst FavoritesPage = () => <FavoriteMoviesContainer />\n\nexport default FavoritesPage;","import React from 'react';\nimport { WatchLaterMoviesContainer } from '../../../containers';\n\nconst WatchLaterPage = () => <WatchLaterMoviesContainer />\n\nexport default WatchLaterPage;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport { MainLayout } from './views/layouts';\nimport { SearchPage, FavoritesPage, WatchLaterPage } from './views/pages';\n\nfunction App() {\n  return (\n    <Router basename='/my-cinema'>\n      <MainLayout>\n        <Route exact path='/' component={SearchPage} />\n        <Route exact path='/favorites' component={FavoritesPage} />\n        <Route exact path='/watch-later' component={WatchLaterPage} />\n      </MainLayout>\n    </Router>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { MOVIE_SEARCH_START, MOVIE_SEARCH_FAILURE, MOVIE_SEARCH_SUCCESS, MOVIE_SEARCH_RESET } from '../types';\nimport { IMoviesFetchState, MovieSearchAction } from '../models';\n\n\nexport const initialState: IMoviesFetchState = {\n  isFetched: false,\n  isFetching: false,\n}\n\nexport default (state: IMoviesFetchState = initialState, action: MovieSearchAction): IMoviesFetchState => {\n  switch (action.type) {\n    case MOVIE_SEARCH_START:\n      return { ...initialState, isFetching: true };\n    case MOVIE_SEARCH_FAILURE:\n      return { ...initialState, isFetched: false, isFetching: false, error: action.payload };\n    case MOVIE_SEARCH_SUCCESS:\n      return { ...initialState, isFetched: true, isFetching: false, data: action.payload };\n    case MOVIE_SEARCH_RESET:\n      return initialState;\n    default:\n      return state;\n  }\n}","import { IFavorites, FavoriteAction } from \"../models\"\nimport { ADD_FAVORITE, REMOVE_FAVORITE } from \"../types\"\n\nexport const initialState: IFavorites = {}\n\nexport default (state: IFavorites = initialState, action: FavoriteAction) => {\n  switch (action.type) {\n    case ADD_FAVORITE: {\n      const { id } = action.payload;\n      return { ...state, [id]: action.payload };\n    }\n    case REMOVE_FAVORITE: {\n      const { id } = action.payload;\n      delete state[id];\n      return { ...state };\n    }\n    default:\n      return state;\n  }\n}","import { IWatchLater, WatchLaterActions } from \"../models\"\nimport { ADD_WATCH_LATER, REMOVE_WATCH_LATER } from \"../types\";\n\nexport const initialState: IWatchLater = {};\n\nexport default (state: IWatchLater = initialState, action: WatchLaterActions) => {\n  switch (action.type) {\n    case ADD_WATCH_LATER: {\n      const { id } = action.payload;\n      return { ...state, [id]: action.payload };\n    }\n    case REMOVE_WATCH_LATER: {\n      const { id } = action.payload;\n      delete state[id];\n      return { ...state };\n    }\n    default:\n      return state;\n  }\n}","import { MOVIE_TRAILER_FETCH_SUCCESS, MOVIE_TRAILER_FETCH_FAILURE, MOVIE_TRAILER_FETCH_START, MOVIE_TRAILER_FETCH_RESET } from '../types';\nimport { IMovieTrailerFetchState, MovieTrailerActions } from '../models';\n\n\nexport const initialState: IMovieTrailerFetchState = {\n  isFetched: false,\n  isFetching: false,\n}\n\nexport default (state: IMovieTrailerFetchState = initialState, action: MovieTrailerActions): IMovieTrailerFetchState => {\n  switch (action.type) {\n    case MOVIE_TRAILER_FETCH_START:\n      return { ...initialState, isFetching: true };\n    case MOVIE_TRAILER_FETCH_FAILURE:\n      return { ...initialState, isFetched: false, isFetching: false, error: action.payload };\n    case MOVIE_TRAILER_FETCH_SUCCESS:\n      return { ...initialState, isFetched: true, isFetching: false, data: action.payload };\n    case MOVIE_TRAILER_FETCH_RESET:\n      return initialState;\n    default:\n      return state;\n  }\n}","import { IStateTree } from './interfaces';\nimport { Reducer, AnyAction, combineReducers } from 'redux';\nimport { movieSearchReducer } from './movieSearch/reducers';\nimport { favoritesReducer } from './favorites/reducers';\nimport { watchLaterReducer } from './watchLater/reducers';\nimport { movieTrailerReducer } from './movieTrailer/reducers';\n\ntype IRootReducer = Reducer<IStateTree, AnyAction>;\nconst rootReducer: IRootReducer = combineReducers({\n  movieSearch: movieSearchReducer,\n  favorites: favoritesReducer,\n  watchLater: watchLaterReducer,\n  trailer: movieTrailerReducer\n})\n\nexport default rootReducer;","import { applyMiddleware, createStore, Middleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"./rootReducer\";\n\nconst persistConfig = {\n  key: \"my-cinema\",\n  whitelist: ['favorites', 'watchLater'],\n  storage,\n};\n\nconst middleware: Middleware[] = [thunk];\n\nexport const persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = createStore(persistedReducer, composeWithDevTools(applyMiddleware(...middleware)));\nexport const persistor = persistStore(store);\n","import en from './en';\n\nexport default {\n  en\n}","import searchBar from './searchBar';\nimport navBar from './navBar';\nimport movie from './movie';\nimport pagination from './pagination';\nimport movieTrailer from './movieTrailer';\n\nexport default {\n  ...searchBar,\n  ...navBar,\n  ...movie,\n  ...pagination,\n  ...movieTrailer\n}","export default {\n  'searchBar.placeholder': 'Type the name of a movie'\n}","export default {\n  'navBar.search': 'search',\n  'navBar.watchLater': 'watch later',\n  'navBar.favorites': 'favorites',\n  'navBar.title': 'My Cinema'\n}","export default {\n  'movie.posterMissing': 'No preview available',\n  'movie.noResults': 'No movies here'\n}","export default {\n  'pagination.next': 'next',\n  'pagination.previous': 'previous',\n}","export default {\n  'movieTrailer.notFound': 'Trailer not found'\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { IntlProvider } from 'react-intl';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store, persistor } from './store';\nimport locale from './locale';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <IntlProvider locale='en' messages={locale.en}>\n          <App />\n        </IntlProvider>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}